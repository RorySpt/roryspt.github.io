<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RorySpt 个人资料站</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>不积跬步，无以至千里；不积小流，无以成江海</description>
    <pubDate>Sat, 26 Aug 2023 11:05:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>编码转换</title>
      <link>http://example.com/2023/08/26/cpptools/code-trans/</link>
      <guid>http://example.com/2023/08/26/cpptools/code-trans/</guid>
      <pubDate>Sat, 26 Aug 2023 09:12:51 GMT</pubDate>
      
      <description>一组封装了 WinApi 的编码转换方法，在 ANSI、WideChar(UTF16)、UTF8 之间自由转换</description>
      
      
      
      <content:encoded><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;format&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span> <span class="comment">// just for windows platform</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">WideCharToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span>;</span><br><span class="line"><span class="function">std::wstring <span class="title">AnsiToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function">std::u8string <span class="title">WideCharToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span>;</span><br><span class="line"><span class="function">std::wstring <span class="title">Utf8ToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span>;</span><br><span class="line"><span class="function">std::u8string <span class="title">AnsiToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">Utf8ToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">code_trans_unit_testing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for cpp23... then #include&lt;print&gt; replaced</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">println</span><span class="params">(<span class="type">const</span> std::string_view fmt, Types&amp;&amp;... args)</span> </span>&#123; std::cout &lt;&lt; std::<span class="built_in">vformat</span>(fmt, std::<span class="built_in">make_format_args</span>(args...)) &lt;&lt; <span class="string">&quot;\n&quot;</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> std::string_view fmt, Types&amp;&amp;... args)</span> </span>&#123; std::cout &lt;&lt; std::<span class="built_in">vformat</span>(fmt, std::<span class="built_in">make_format_args</span>(args...)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">WideCharToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, ws, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::string s; s.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, ws, <span class="number">-1</span>, s.<span class="built_in">data</span>(), length, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">AnsiToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, s, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::wstring ws; ws.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, s, <span class="number">-1</span>, ws.<span class="built_in">data</span>(), length)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::u8string <span class="title">WideCharToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">WideCharToMultiByte</span>(CP_UTF8, <span class="number">0</span>, ws, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::u8string u8s; u8s.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WideCharToMultiByte</span>(CP_UTF8, <span class="number">0</span>, ws, <span class="number">-1</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(u8s.<span class="built_in">data</span>()), length, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u8s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">Utf8ToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(u8s), <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::wstring ws; ws.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(u8s), <span class="number">-1</span>, ws.<span class="built_in">data</span>(), length)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::u8string <span class="title">AnsiToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">WideCharToUtf8</span>(<span class="built_in">AnsiToWideChar</span>(s).<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">Utf8ToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">WideCharToAnsi</span>(<span class="built_in">Utf8ToWideChar</span>(u8s).<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">code_trans_unit_testing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;common unit test begin!&quot;</span>);</span><br><span class="line"><span class="type">const</span> std::wstring input_w = <span class="string">L&quot;成功！&quot;</span>;</span><br><span class="line"><span class="type">const</span> std::u8string input_u8 = <span class="built_in">WideCharToUtf8</span>(input_w.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="type">const</span> std::string input = <span class="built_in">WideCharToAnsi</span>(input_w.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;Ansi&lt;-&gt;WideChar: &#123;&#125;&quot;</span>, <span class="built_in">WideCharToAnsi</span>(<span class="built_in">AnsiToWideChar</span>(input.<span class="built_in">c_str</span>()).<span class="built_in">c_str</span>()));</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;Utf8&lt;-&gt;WideChar: &#123;&#125;&quot;</span>, <span class="built_in">WideCharToAnsi</span>(<span class="built_in">Utf8ToWideChar</span>(input_u8.<span class="built_in">c_str</span>()).<span class="built_in">c_str</span>()));</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;Utf8&lt;-&gt;Ansi: &#123;&#125;&quot;</span>, <span class="built_in">Utf8ToAnsi</span>(<span class="built_in">AnsiToUtf8</span>(input.<span class="built_in">c_str</span>()).<span class="built_in">c_str</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/cpp/">cpp</category>
      
      <category domain="http://example.com/categories/cpp/tools/">tools</category>
      
      <category domain="http://example.com/categories/cpp/tools/code-trans/">code-trans</category>
      
      
      <category domain="http://example.com/tags/Cpp/">Cpp</category>
      
      <category domain="http://example.com/tags/Tools/">Tools</category>
      
      <category domain="http://example.com/tags/CodeTrans/">CodeTrans</category>
      
      <category domain="http://example.com/tags/Unicode/">Unicode</category>
      
      <category domain="http://example.com/tags/Ansi/">Ansi</category>
      
      
      <comments>http://example.com/2023/08/26/cpptools/code-trans/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>结构型设计模式</title>
      <link>http://example.com/2023/08/25/design-patterns/structural-pattern/</link>
      <guid>http://example.com/2023/08/25/design-patterns/structural-pattern/</guid>
      <pubDate>Fri, 25 Aug 2023 06:06:57 GMT</pubDate>
      
      <description>记录设计模式中的结构型设计模式</description>
      
      
      
      <content:encoded><![CDATA[<p>结构型设计模式主要关注如何设置应用程序的结构，以使代码满足SOLID设计原则，提高代码的通用性和可重构性。</p><p>当谈到对象的结构时，我们可以使用下面几种常用的方式：</p><ul><li><strong>继承</strong>：对象可以直接获得基类的非私有成员和方法。为实例化对象，派生类必须提供每个继承而来的虚函数的实现，否则该派生类是抽象的，不能被实例化（但可以继承该派生类）</li><li><strong>组合</strong>：组合是一种部分与整体的关系，部分不可以离开整体而单独存在。例如，如果某个对象有一个类型为<code>owner&lt;T&gt;</code>的成员，当该对象被销毁时，其成员也随之被销毁</li><li><strong>聚合</strong>：聚合是一种部分与整体的关系，部分和整体可以单独存在。例如，一个对象可以含有类型为<code>T*</code>或者<code>shared_ptr&lt;T&gt;</code>的成员。</li></ul><p>我们把组合和聚合看作同一种类型的方法。例如，Person类含有一个类型为Address的成员，我们既可以将Address作为外部定义的类，也可以将其定义为Person的内部类。换言之，假设将Person中的Address类对象声明为公共成员，在上述两种方式下，我们可以分别使用Address和Person::Address的方法将其实例化。</p><p>想表达“聚合”的意思但却使用“组合”这个词的现象很普遍，以至于我们可以互换地使用它们。例如，当我们谈论IoC容器时，我们使用的是“组合”。但是，IoC容器不是单独控制每个对象的生命周期吗？的确如此，虽然这里使用“组合”这个词，其实是指“聚合”。</p><h1 id="适配器模式"><a class="markdownIt-Anchor" href="#适配器模式"></a> 适配器模式</h1><p>根据已有的接口得到另一个不同的接口，在接口上构建一个适配器。</p><h2 id="适配器"><a class="markdownIt-Anchor" href="#适配器"></a> 适配器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void DrawPoints(CPaintDC&amp; dc, std::vector&lt;Point&gt;::iterator start, std::vector&lt;Point&gt;::iterator end);</span><br></pre></td></tr></table></figure><p>当我们需要提供像素坐标以渲染图像，但是我们只有一些向量对象。我们要绘制一系列矩形：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::shared_ptr&lt;VectorObject&gt;&gt; vectorObjects&#123;</span><br><span class="line">    std::<span class="built_in">make_shared</span>&lt;VectorRectangle&gt;(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    std::<span class="built_in">make_shared</span>&lt;VectorRectangle&gt;(<span class="number">30</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了绘制这些对象，我们需要将每个矩形从一组线段转换为数量庞大的像素点。为此，我们定义了一个单独的适配器类，用于存储这些像素点，并且定义一组迭代器来访问这些点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LineToPointAdapter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;Point&gt; Points;</span><br><span class="line">    <span class="built_in">LineToPointAdapter</span>(Line&amp; line)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">begin</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> point.<span class="built_in">begin</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">end</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> point.<span class="built_in">end</span>();&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Points points;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Line对象转换为像素点集的过程由构造函数完成，所以<code>LineToPointAdapter</code>是<strong>饿汉式的适配器</strong>。在适配器对象构建过程中，转换工作随之完成。</p><p><strong>Then：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; obj: vectorObjects)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; line: *obj)</span><br><span class="line">&#123;</span><br><span class="line">LineToPointAdapter lpo&#123; line &#125;;</span><br><span class="line"><span class="built_in">DrawPoints</span>(dc, lpo.<span class="built_in">begin</span>(), lpo.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="临时适配器对象"><a class="markdownIt-Anchor" href="#临时适配器对象"></a> 临时适配器对象</h2><p>上述代码存在一个主要的问题：每次刷新屏幕时，函数<code>DrawPoints()</code>都会被调用，这意味着适配器对象会不断地为同样的线段对象生成相同的像素点数据，甚至是无数次！怎样改善这个问题呢？</p><p>一种解决办法是在程序的开始处定义一个像素点容器，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;Point&gt; points;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; obj: vectorObjects)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; line: *obj)</span><br><span class="line">&#123;</span><br><span class="line">LineToPointAdapter lpo&#123; line &#125;;</span><br><span class="line">points.<span class="built_in">assign</span>(lpo.<span class="built_in">begin</span>(), lpo.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，假如在某个时候，原始的几何对象<code>vectorObjects</code>发生了变化。我们并不知道它们发生了怎样的变化，但我们确实想缓存未改动的数据，而仅仅为变化的对象重新生成像素点数据。</p><p>首先，为了避免重新生成数据，我们需要独特的识别线段的方法，这意味着我们需要独特的识别点的方法。此时，<strong>ReSharper</strong> 的 <strong>Generate</strong> | <strong>Hash</strong> 函数可以派上用场：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">size_t</span> <span class="title">hash_value</span><span class="params">(<span class="type">const</span> Point&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> seed = <span class="number">0x725C686F</span>;</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.x);</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.x);</span><br><span class="line"><span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">Point start, end;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">size_t</span> <span class="title">hash_value</span><span class="params">(<span class="type">const</span> Line&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> seed = <span class="number">0x719E6B16</span>;</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.start);</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.end);</span><br><span class="line"><span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LineToPointCachingAdapter</code>有一个缓存<code>cache</code>，它是一种从哈希值到点的映射：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> map&lt;<span class="type">size_t</span>, Points&gt; cache;</span><br></pre></td></tr></table></figure><p>当迭代器生成像素点集时，我们将以如下方式返回被访问的对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cache[line_hash].<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cache[line_hash].<span class="built_in">end</span>(); &#125;</span><br></pre></td></tr></table></figure><p>这个算法有趣的地方在于：在生成像素点之前，先检查这些像素点是否已经生成，如果已经生成，那么函数直接退出；如果没有生成，则算法生成像素点集，并将其保存到缓存<code>cache</code>中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">LineToPointCachingAdapter</span>(Line&amp; line)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> boost::hash&lt;Line&gt; hash;</span><br><span class="line">    line_hash = <span class="built_in">hash</span>(line);</span><br><span class="line">    <span class="keyword">if</span>(cache.<span class="built_in">fine</span>(line_hash) != cache.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Points point;</span><br><span class="line">    <span class="comment">// same code as before;</span></span><br><span class="line">    </span><br><span class="line">    cache[line_hash] = points;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了hash函数和缓存cache的帮助，我们可以显著减少转换次数。</p><h2 id="双向转换器"><a class="markdownIt-Anchor" href="#双向转换器"></a> 双向转换器</h2><p>根据程序的设计，要求输入数字的文本框会将其内部的状态保存为字符串，而我们想将输入的值记录为数字，然后验证该输入是否为有效数字。如何将UI的输入映射为适当的变量？</p><p>通常，我们需要的是<strong>双向绑定</strong>：UI的输入会修改底层变量（例如，类的某个成员），但同时，如果底层变量被修改，那么UI也将相应地更新。</p><p>表现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntToStringConverter converter;</span><br><span class="line">std::cout &lt;&lt; converter.<span class="built_in">Convert</span>(<span class="number">123</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 123</span></span><br><span class="line">std::cout &lt;&lt; converter.<span class="built_in">ConvertBack</span>(<span class="string">&quot;456&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 456</span></span><br><span class="line">std::cout &lt;&lt; converter.<span class="built_in">ConvertBack</span>(<span class="string">&quot;xyz&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// -2147483648</span></span><br></pre></td></tr></table></figure><p>在实际开发中，我们需要同时处理许多问题：不仅要适配器来转换参数，还要进行验证，并在相关参数发生变化时自动完成转换（通过观察者模式）。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>“适配器”是一个非常简单的概念：它允许我们将已有的接口调整（适配）为我们需要另一个接口。适配器模式存在的真正问题是，在适配过程中，有时会生成临时数据以满足其他接口的要求。当发生这种情况时，我们可以采用缓存策略，确保只在必要时生成新的数据。当缓存的数据发生变化时，需要清理缓存中过时的数据。</p><p>还有一个主题是懒汉型适配器，我们之前的实现总是在适配器创建时完成适配转换。</p><h1 id="桥接模式"><a class="markdownIt-Anchor" href="#桥接模式"></a> 桥接模式</h1><h2 id="pimpl-模式"><a class="markdownIt-Anchor" href="#pimpl-模式"></a> Pimpl 模式</h2><p><strong>header file:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">std::string name;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>();</span><br><span class="line">    ~<span class="built_in">Person</span>();</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">PersonImpl</span>;</span><br><span class="line">    PersonImpl *impl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Person</code>类将其具体实现隐藏在另一个类中，即<code>PersonImpl</code>。需要格外注意的是<code>PersonImpl</code>类不是在头文件中定义的，而是驻留在 <code>.cpp</code>文件（<code>Person.cpp</code>，因此<code>Person</code>和<code>PersonImpl</code>放在一起）。它的定义非常简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span>::PersonImpl</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">(Person* p)</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Person</code>的构造函数中创建<code>PersonImpl</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">    : <span class="built_in">impl</span>(<span class="keyword">new</span> PersonImpl) &#123;&#125;</span><br><span class="line">Person::~<span class="built_in">Person</span>() &#123;<span class="keyword">delete</span> impl;&#125;</span><br></pre></td></tr></table></figure><p><code>Person::greet()</code>接口只是将控制权交给<code>PersonImpl::greet()</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::greet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    impl-&gt;<span class="built_in">greet</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> Person::PersonImpl::<span class="built_in">greet</span>(Person* p)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="built_in">println</span>(<span class="string">&quot;hello &#123;&#125;&quot;</span>, p-&gt;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，这就是Pimpl模式。</p><p>Pimpl模式是桥接模式的一种很好的体现：pimpl是一种不透明指针（即我们不知道它背后是什么），它起着桥梁的作用，将公共接口的成员与其隐藏在 .cpp 文件中的底层实现结合了起来。</p><h2 id="桥接模式介绍"><a class="markdownIt-Anchor" href="#桥接模式介绍"></a> 桥接模式介绍</h2><p><strong>Pimpl</strong> 模式是桥接模式（Bridge）模式的一种具体体现。</p><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>桥接模式通常作为连接器或粘合剂，将两个“不相关”的组件连接起来。抽象（接口）的使用允许组件之间在不了解具体实现的情况下彼此交互。</p><p>也就是说，桥接模式的参与者确实需要意识到彼此的存在。者与中介者模式形成了对比，中介者模式允许对象在毫不知晓对方的情况下进行通信。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/">Learn Design Patterns</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/Learn-Structural-Pattern/">Learn Structural Pattern</category>
      
      
      <category domain="http://example.com/tags/Design-Patterns/">Design Patterns</category>
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Reading-Note/">Reading Note</category>
      
      <category domain="http://example.com/tags/Structural-Pattern/">Structural Pattern</category>
      
      
      <comments>http://example.com/2023/08/25/design-patterns/structural-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>the shading</title>
      <link>http://example.com/2023/08/20/learn-opengl/the-shading/</link>
      <guid>http://example.com/2023/08/20/learn-opengl/the-shading/</guid>
      <pubDate>Sun, 20 Aug 2023 08:54:21 GMT</pubDate>
      
      <description>OpenGL 的着色器相关</description>
      
      
      
      <content:encoded><![CDATA[<p>Shading is local. <font color=Peru>No shadow</font> will be generated! (shading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span> shadow)</p><h1 id="diffuse-reflection"><a class="markdownIt-Anchor" href="#diffuse-reflection"></a> Diffuse Reflection</h1><ul><li><p>Light is scattered uniformly in all directions</p><ul><li>Surface color is the same for all view directions<details><summary>图片</summary> <img text-al style="margin-left: 0%; zoom: 50%;" src="/images/the-shading/image-20230820175637006.png" alt=""  /></details></li><li>But how much light (energy) is received?<ul><li>lambert’s cosine law<details><summary>图片</summary><img src="/images/the-shading/image-20230820211502470.png" alt="" style="margin-left: 0%;margin-bottom: 20px; zoom: 50%;" /></details></li></ul></li></ul></li><li><p>Shading independent of view direction</p><img src="/images/the-shading/image-20230820212524209.png" alt="" style=" zoom: 50%;" /></li></ul><h1 id="specular-term-blinn-phong"><a class="markdownIt-Anchor" href="#specular-term-blinn-phong"></a> Specular Term (Blinn-Phong)</h1><p>Intensity depends on view direction</p><ul><li>Bright near mirror reflection direction<br /><img src="/images/the-shading/image-20230822141743340.png" alt="" style="zoom:50%;" /></li></ul><h1 id="ambient-term"><a class="markdownIt-Anchor" href="#ambient-term"></a> Ambient Term</h1><p>Shading that does not depend on anything</p><ul><li>Add constant color to account for disregarded illumination and fill in black shadows</li><li>This is approximate / fake!<br /><img src="/images/the-shading/image-20230824151710347.png" alt="" style="zoom:50%;" /></li></ul><h1 id="blinn-phong-reflection-model"><a class="markdownIt-Anchor" href="#blinn-phong-reflection-model"></a> Blinn-Phong Reflection Model</h1><img src="/images/the-shading/image-20230824152006727.png" alt="" style="zoom:80%;" /><h1 id="graphics-pipeline"><a class="markdownIt-Anchor" href="#graphics-pipeline"></a> Graphics Pipeline</h1><img src="/images/the-shading/image-20230824153702767.png" alt="" style="zoom: 50%;" /><h1 id="shadertoy-beta"><a class="markdownIt-Anchor" href="#shadertoy-beta"></a> <a href="https://www.shadertoy.com/">Shadertoy BETA</a></h1>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/">Learn OpenGL</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/Shading/">Shading</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/OpenGL/">OpenGL</category>
      
      <category domain="http://example.com/tags/Shading/">Shading</category>
      
      
      <comments>http://example.com/2023/08/20/learn-opengl/the-shading/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线性代数中的线性方程组</title>
      <link>http://example.com/2023/08/19/mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</link>
      <guid>http://example.com/2023/08/19/mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</guid>
      <pubDate>Sat, 19 Aug 2023 04:30:00 GMT</pubDate>
      
      <description>线性代数中的线性方程组 概念</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="线性代数中的线性方程组"><a class="markdownIt-Anchor" href="#线性代数中的线性方程组"></a> 线性代数中的线性方程组</h1><p>线性方程组是线性代数的核心，下面通过简单而具体的设置来引入线性代数的许多重要概念</p><h2 id="线性方程组"><a class="markdownIt-Anchor" href="#线性方程组"></a> 线性方程组</h2><p>包含变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,\cdots,x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<strong>线性方程</strong>是形如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a_1x_1+a_2x_2+\dots+a_nx_n=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span> 的方程，其中b与系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,\dots,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是实数或者复数，通常是已知数。下标n可以是任意正整数。</p><p><strong>线性方程组</strong>是由一个或者几个包含相同变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,\cdots,x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的线性方程组成的。线性方程组的解是一组数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(s_1,s_2,\dots,s_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，用这组数分别代替<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,\cdots,x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时所有的方程的两边相等。</p><p>方程组所有可能的解的集合称为线性方程组的解集。若两个线性方程组有相同的解集，则这两个线性方程组称为<strong>等价的</strong>。也就是说，第一个方程组的每个解都是第二个方程组的解，第二个方程组的每个解都是第一个方程组的解</p><blockquote><p>线性方程组的解有下列三种情况：</p><ol><li>无解</li><li>有唯一解</li><li>有无穷多解</li></ol></blockquote><p>我们称一个线性方程组是<strong>相容的</strong>，若他又一个解或者无穷多个解；称他是<strong>不相容的</strong>，若它无解。</p><h3 id="矩阵记号"><a class="markdownIt-Anchor" href="#矩阵记号"></a> 矩阵记号</h3><p>一个线性方程组包含的主要信息可以用一个称为<strong>矩阵</strong>的紧凑的矩阵阵列表示<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。给出方程组</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mn>8</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>5</mn><msub><mi>x</mi><mn>1</mn></msub><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo>+</mo><mn>5</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>10</mn></mrow></mstyle></mtd></mtr></mtable></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}x_1-2x_2+1x_3&amp;=0\\+2x_2-8x_3&amp;=8\\5x_1\;\;\;\;\;\;\;\;\;\;+5x_3&amp;=10\end{aligned}\tag3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">8</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>把每一个变量的系数写在对齐的一行中，矩阵</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>5</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1&amp;-2&amp;1\\0&amp;2&amp;-8\\5&amp;0&amp;-5\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">8</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>称为方程组 (3) 的<strong>系数矩阵</strong>，而</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>8</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>5</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(4)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{bmatrix}1&amp;-2&amp;1&amp;0\\0&amp;2&amp;-8&amp;8\\5&amp;0&amp;-5&amp;10\end{bmatrix}\tag4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">8</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">4</span></span><span class="mord">)</span></span></span></span></span></span></p><p>称为它的<strong>增广矩阵</strong>。方程组的增广矩阵是把它的系数矩阵添上一列所得，这一列是由方程组右边常数组成的。</p><p>矩阵的<strong>维数</strong>说明它包含行数和列数。上面的增广矩阵（4）有3行4列，称为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">3\times4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>（读作3行4列）矩阵。若m，n为正整数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>矩阵是一个有m行n列的数的矩阵阵列。（行数写在前面。）矩阵记号为解方程组带来便利。</p><h3 id="解线性方程组"><a class="markdownIt-Anchor" href="#解线性方程组"></a> 解线性方程组</h3><p>解线性方程组的一般方法的基本思路是把方程组用一个更容易解的等价方程组（即有相同解集的方程组）代替。</p><p>粗略地说，我们用方程组中第一个方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项消去其他方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项。然后用第二个方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项消去其他方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项，以此类推。最后我们得到一个很简单的等价方程组。</p><p>用来简化线性方程组的三种基本变换是：把某个方程换成它与另一个方程倍数的和；交换两个方程的位置；把某一个方程的所有项乘以一个非零常数。</p><blockquote><p><strong>初等行变换</strong></p><ol><li>（倍加变换）把某一行换成它本身与另一行的倍数和</li><li>（对换变换）把两行对换</li><li>（倍乘变换）把某一行的所有元素乘以同一个非零数</li></ol></blockquote><p>行变换可施加于任何矩阵，不仅仅是对于线性方程组的增广矩阵。我们称两个矩阵为<strong>行等价的</strong>，若其中一个矩阵可以经一系列初等变换成另一个矩阵。</p><p>重要的一点是行变换是<strong>可逆的</strong>。若两行被对换，则再次对换它们就会还原为原来的状态。若某行乘以非零常数 c，则将所得的行乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 就得出原来的行。最后，考虑涉及两行的倍加运算。假设把第一行的 c 倍加到第二行得到新的第二行，那么“逆”变换就是把第一行的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">-c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathnormal">c</span></span></span></span> 倍加到（新的）第二行上就得到原来的第二行。</p><p>此时，我们更关注对一个线性方程组的增广矩阵进行行变换。假设一个线性方程组经过行变换变成另一个新的方程组，考虑每一种行变换，容易看出，原方程组的任何一个解仍是新的方程组的一个解。反之，因原方程组也可由新方程组经行变换得出，故新方程组的每个解也是原方程组的解。这就证明了下列事实。</p><blockquote><p>若两个线性方程组的增广矩阵是等价的，则它们具有相同的解集。</p></blockquote><h3 id="存在与唯一性问题"><a class="markdownIt-Anchor" href="#存在与唯一性问题"></a> 存在与唯一性问题</h3><blockquote><p><strong>线性方程组的两个基本问题</strong></p><ol><li>方程组是否相容，即它是否至少有一个解？</li><li>若它有解，它是否只有一个解，即解是否唯一？</li></ol></blockquote><blockquote><p><strong>数值计算的注解</strong></p><p>在实际问题中，线性方程组是通过计算机求解的。对于方阵，计算机程序基本是应用消去法，稍加修正以改进精确度。</p><p>工商业中大量线性代数问题运用浮点运算求解，数表示为小数形式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><mn>0.</mn><msub><mi>d</mi><mn>1</mn></msub><mo>…</mo><msub><mi>d</mi><mi>p</mi></msub><mo>×</mo><mn>1</mn><msup><mn>0</mn><mi>r</mi></msup></mrow><annotation encoding="application/x-tex">\pm0.d_1\dots d_p \times10^r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord">±</span><span class="mord">0</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span>，其中 r 是整数，而小数点右边的数位 p 通常为8到16位。这种算数运算一般是有误差的，因为其结果必须四舍五入（或舍去）为存储时所需要的数位。“舍入误差”在输入像 1/3 这样的数时也会产生，因为它必须用近似的有限小数表示。幸运的是，浮点运算中的不精确性很少引起严重问题。</p></blockquote><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>反过来说矩阵是表示线性方程组主要信息的矩阵阵列 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Mathematics/">Mathematics</category>
      
      
      <category domain="http://example.com/tags/c/">c++</category>
      
      <category domain="http://example.com/tags/mathematics/">mathematics</category>
      
      
      <comments>http://example.com/2023/08/19/mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一些数学公式</title>
      <link>http://example.com/2023/08/19/mathematics/some_mathematical_formulas/</link>
      <guid>http://example.com/2023/08/19/mathematics/some_mathematical_formulas/</guid>
      <pubDate>Sat, 19 Aug 2023 04:30:00 GMT</pubDate>
      
      <description>常用的数学公式</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="rodrigues-rotation-formula"><a class="markdownIt-Anchor" href="#rodrigues-rotation-formula"></a> Rodrigues’ Rotation Formula</h1><p>Rotation by angle <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> around axis <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">n</mtext></mrow><annotation encoding="application/x-tex">\textbf{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">n</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext mathvariant="bold">R</mtext><mo stretchy="false">(</mo><mtext mathvariant="bold">n</mtext><mo separator="true">,</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mtext mathvariant="bold">I</mtext><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><msup><mtext mathvariant="bold">nn</mtext><mi>T</mi></msup><mo stretchy="false">)</mo><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><munder><munder><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo stretchy="true">⏟</mo></munder><mtext mathvariant="bold">N</mtext></munder></mrow><annotation encoding="application/x-tex">\textbf{R}(\textbf{n},\alpha) = cos(\alpha)\textbf{I} + (1 - cos(\alpha)\textbf{nn}^T) + sin(\alpha)\underbrace{\begin{pmatrix}0 &amp; -n_z &amp; n_y \\n_z &amp; 0 &amp; -n_x \\-n_y &amp; n_x &amp; 0\end{pmatrix} }_\textbf{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord textbf">R</span></span><span class="mopen">(</span><span class="mord text"><span class="mord textbf">n</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord text"><span class="mord textbf">I</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord text"><span class="mord textbf">nn</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:4.928317em;vertical-align:-2.8782970000000003em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0500199999999995em;"><span style="top:-1.1717229999999996em;"><span class="pstrut" style="height:4.05002em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord textbf mtight">N</span></span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span class="svg-align" style="top:-1.8519999999999999em;"><span class="pstrut" style="height:4.05002em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19802em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8782970000000003em;"><span></span></span></span></span></span></span></span></span></span></p><h1 id="orthographic-projection"><a class="markdownIt-Anchor" href="#orthographic-projection"></a> Orthographic Projection</h1><p>Translate (<strong>center</strong> to origin) <font color=Peru>first</font>, then scale (length/width/height to <strong>2</strong>)</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>r</mi><mo>−</mo><mi>l</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>t</mi><mo>−</mo><mi>b</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mi>f</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>r</mi><mo>+</mo><mi>l</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>t</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M_{ortho} = \begin{bmatrix}\frac{2}{r-l} &amp;0&amp;0&amp;0\\0&amp;\frac{2}{t-b}&amp;0&amp;0\\0&amp;0&amp;\frac{2}{n-f}&amp;0\\0&amp;0&amp;0&amp;1\\\end{bmatrix}\begin{bmatrix}0&amp;0&amp;0&amp;-\frac{r+l}{2}\\0&amp;0&amp;0&amp;-\frac{t+b}{2}\\0&amp;0&amp;0&amp;-\frac{n+f}{2}\\0&amp;0&amp;0&amp;1\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.023094em;vertical-align:-2.2615469999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><strong>Caveat</strong><ul><li>Looking at / along -Z is making near and far not intuitive (n &gt; f)</li><li>FYI: that’s why OpenGL (a Graphics API) uses left hand coords.</li></ul></li></ul><h1 id="perspective-projection"><a class="markdownIt-Anchor" href="#perspective-projection"></a> Perspective Projection</h1><ol><li>First “squish” the frustum into a cuboid (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mo>&gt;</mo><mi>n</mi><mo separator="true">,</mo><mi>f</mi><mo>−</mo><mo>&gt;</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">n -&gt; n, f-&gt; f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>)(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi></mrow></msub><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">M_{persp}-&gt;ortho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">o</span></span></span></span>)</li><li>Do orthographic projection (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{ortho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, already known!)</li><li><strong>In order to find a transformation</strong><ul><li>Precall the key idea: Find the relationship between transformed points (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo separator="true">,</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo separator="true">,</mo></msup><mo separator="true">,</mo><msup><mi>z</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">x^,,y^,,z^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.631332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span>) and the original points (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x,y,z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>)</li></ul></li></ol><details>   <summary>过程</summary>  <img src="/images/some_mathematical_formulas/image-20230819182429668.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819182909928.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819182953853.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819183018965.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819183056277.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819183126120.png" style="zoom:50%;" /></details><p>结果：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>n</mi><mi>f</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M_{persp-&gt;ortho} = \begin{bmatrix}n&amp;0&amp;0&amp;0\\0&amp;n&amp;0&amp;0\\0&amp;0&amp;n+f&amp;-nf\\0&amp;0&amp;1&amp;0\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80303em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi></mrow></msub><mo>=</mo><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{persp} = M_{ortho}M_{persp-&gt;ortho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Mathematics/">Mathematics</category>
      
      <category domain="http://example.com/categories/Learn/Mathematics/Formula/">Formula</category>
      
      
      <category domain="http://example.com/tags/c/">c++</category>
      
      <category domain="http://example.com/tags/mathematics-formula/">mathematics formula</category>
      
      
      <comments>http://example.com/2023/08/19/mathematics/some_mathematical_formulas/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>创建型模式</title>
      <link>http://example.com/2023/07/30/design-patterns/creational-pattern/</link>
      <guid>http://example.com/2023/07/30/design-patterns/creational-pattern/</guid>
      <pubDate>Sun, 30 Jul 2023 08:57:58 GMT</pubDate>
      
      <description>记录设计模式中的创建型模式</description>
      
      
      
      <content:encoded><![CDATA[<p>在没有创建型设计模式的时候，在C++中创建对象的行为充满了危险。应该在栈上创建对象，还是应该在堆上创建？应该使用原始指针，使用unique或shared指针，还是应该彻底使用其他对象来管理创建的对象？还有一点，是手动创建对象更合适，还是说应当将包含所有关键信息的创建过程延迟到诸如工厂模式或者控制反转容器等特定的对象构造器中？</p><p>不论选择哪一种方式，创建对象仍旧是一项令人讨厌的工作，尤其是创建过程及其复杂或者需要遵守某些规定的时候。于是，创建型设计模式诞生了：它们是对象创建相关的通用方法。</p><h1 id="构造器模式"><a class="markdownIt-Anchor" href="#构造器模式"></a> 构造器模式</h1><p>构造器（Builder）模式主要关注复杂对象的创建过程，复杂对象是指的难以通过调用单行构造函数来创建的对象。这些类型的对象本身可能由其他对象组成，并且可能涉及不太明显的逻辑，因此需要专门设计单独的组件来创建。</p><p>构造器模式地目的是简化复杂对象或者一系列对象的构建过程，从而单独定义构成该复杂对象的各个组件的构建方法。</p><ul><li>构造器模式可以通过流式接口调用链来实现复杂的构建过程。为了实现流式接口，构造器的函数需要返回this或*this。为了让构造器使用继承，父类构造器需要知道派生类的实际类型，以便返回实际类型的this，使用模板参数来传递</li><li>为了强调用户使用构造器的API，我们可以将目标对象的构造函数限制为不可访问，同时定义一个create()接口返回构造器。</li><li>通过定义适当的运算符，可以使构造器转换为对象本身。</li><li>借助C++新特性中的统一初始化语法，可以实现Groovy风格的构造器。这是一种很通用的方法，可以创建各式各样的DSL</li><li>单个构造器接口可以暴露出多个子构造器接口。通过灵活的使用继承和流式接口很容易将一个构造器变换为另一个构造器。</li></ul><p>当对象构建过程是非普通的时候，构造器模式是有意义的。对于那些通过数量有限且命名合理的构造函数参数来明确构造的简单对象而言，它们应该使用构造函数（或依赖注入），而不必使用构造器模式。</p><h1 id="工厂方法和抽象工厂"><a class="markdownIt-Anchor" href="#工厂方法和抽象工厂"></a> 工厂方法和抽象工厂</h1><h2 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h2><p>使用方法来构建预定义型号的对象，替代并隐藏构造函数，强制用户创建特定类型而非任意类型的对象实例</p><h2 id="工厂"><a class="markdownIt-Anchor" href="#工厂"></a> 工厂</h2><p>专门负责创建特殊类型对象的单独的类，将工厂方法集成到工厂类里，用以追踪已创建对象，实现相互约束</p><h2 id="工厂方法和多态"><a class="markdownIt-Anchor" href="#工厂方法和多态"></a> 工厂方法和多态</h2><p>不论工厂方法属于被创建的对象本身还是属于单独定义的工厂，使用工厂方法的好处之一是它们可以返回多态类型。</p><h2 id="嵌套工厂"><a class="markdownIt-Anchor" href="#嵌套工厂"></a> 嵌套工厂</h2><p>从构造函数迁移到工厂，涉及以下步骤：</p><ul><li>将构造函数声明为受保护的</li><li>将工厂声明为对象的友元类。如果定义的某些类具有一定的层次结构，那么需要在这个层次结构中的每一个元素重复上面的操作</li><li>在工厂方法内部创建对象，然后以指针形式返回</li></ul><p>上述所有步骤的核心问题在于对象和创建该对象的工厂之间的纠缠。如果工厂在对象之后创建，并且由我们来控制工厂创建的过程，那么包含友元类的声明显然违背了开闭原则。但如果工厂创建一个它自己都无从知晓的对象，将工厂是为友元类显然更不可能</p><p>如果一开始就准备与工厂和对象打交道，那么可以考虑创建嵌套（内部）的工厂，也就是说，在对象内部定义的工厂。</p><p>注：</p><ul><li>嵌套类声明服从<a href="https://zh.cppreference.com/w/cpp/language/access">成员访问</a>说明符，从外围类的作用域之外不能指名私有的成员类，但是可以操作该类的对象。因此可以将嵌套类声明为私有，类实例公开，类实例可以正常访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">Wall</span>(<span class="type">int</span> id) :<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BasicWallFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">BasicWallFactory</span>() = <span class="keyword">default</span>;</span><br><span class="line">        <span class="function">std::shared_ptr&lt;Wall&gt; <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Wall&gt;( <span class="keyword">new</span> <span class="built_in">Wall</span>(count++) );<span class="comment">// 无法使用make_shared</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, Wall&amp; wall) &#123;</span><br><span class="line">        <span class="keyword">return</span>  out &lt;&lt; <span class="string">&quot;I&#x27;m a wall, and id is &quot;</span>&lt;&lt; wall.id &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; </span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">static</span> BasicWallFactory factory;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> wall =  Wall::factory.<span class="built_in">create</span>();</span><br><span class="line">    std::cout &lt;&lt; *wall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂"><a class="markdownIt-Anchor" href="#抽象工厂"></a> 抽象工厂</h2><p>参与整个族类对象的创建，实际上是一种非常罕见的场景，因此与工厂方法和旧工厂模式不同，抽象工厂模式是一种只在复杂系统中出现的模式。</p><p>形如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HotDrinkFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> unique_ptr&lt;HotDrink&gt; <span class="title">make</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂本身是具有接口的工厂，但它本身是抽象的，可以作为函数的参数，同时也需要具体的实现来生成对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeFactory</span>: <span class="keyword">public</span> HotDrinkFactory&#123;</span><br><span class="line">    <span class="keyword">public</span>: <span class="function">unique_ptr&lt;HotDrink&gt; <span class="title">make</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_unique</span>&lt;Coffee&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeaFactory</span> ...</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrinkFactory</span>&#123;</span><br><span class="line">    map&lt;string, unique_ptr&lt;HotDrinkFactory&gt;&gt; hot_factorys;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DrinkFactory</span>()&#123;</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;coffee&quot;</span>, <span class="built_in">make_unique</span>&lt;CoffeeFactory&gt;());</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;tea&quot;</span>, <span class="built_in">make_unique</span>&lt;TeaFactory&gt;());</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">unique_ptr&lt;HotDrink&gt; <span class="title">make_drink</span><span class="params">(string_view name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> drink = hot_factorys[name]-&gt;<span class="built_in">make</span>();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> drink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式工厂"><a class="markdownIt-Anchor" href="#函数式工厂"></a> 函数式工厂</h2><p>当我们使用术语“工厂”时，通常指的是下面两个概念：</p><ul><li>指一个类，这个类可以创建对象</li><li>指一个函数，当调用这个函数时，可以创建一个对象。</li></ul><p>第二个概念并不是工厂方法的典型使用场景。如果传入<code>function&lt;&gt;</code>类型的参数（或者普通函数指针），该函数返回类型为T的变量，这也是一种工厂而不是工厂方法。</p><p>幸运的是，函数可以保存在变量中，这可以通过将工厂替换为函数块来实现。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrinkFactory</span>&#123;</span><br><span class="line">    map&lt;string, std::function&lt;unique_ptr&lt;HotDrink&gt;()&gt;&gt; hot_factorys;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DrinkFactory</span>()&#123;</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;coffee&quot;</span>, []()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_unique</span>&lt;Coffee&gt;();</span><br><span class="line">        &#125;);</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;tea&quot;</span>, []()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_unique</span>&lt;Tea&gt;();</span><br><span class="line">        &#125;);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">unique_ptr&lt;HotDrink&gt; <span class="title">make_drink</span><span class="params">(string_view name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> drink = hot_factorys[name]();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> drink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--*它们和抽象工厂表达的行为是一致的，由类表现多态改为函数来实现多态* --><h2 id="对象追踪"><a class="markdownIt-Anchor" href="#对象追踪"></a> 对象追踪</h2><p>与调用构造函数相比，工厂更难使用（不像构造函数那么明确），如果能从工厂中获取某些便利就好了。使用工厂的一种便利是，可以追踪所有已经创建的对象。</p><p>使用工厂的好处包括：</p><ul><li>可以知道已经创建的特定类型的对象数量。</li><li>可以修改或者完全替换整个对象（在数学意义上）的创建过程</li><li>如果使用智能指针，则可以通过观察对象的引用计数来获取对象在其他地方被引用的数量</li></ul><p>服务定位器或者反转容器可以采取这种对象追踪策略。这样容器可以以<code>shared_ptr</code>的形式构建对象，但在内部以<code>weak_ptr</code>的形式管理，这样既可以观察对象状态，又可以在运行时完全替换为新的对象</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>工厂方法：类的成员函数，用于创建对象。它通常可以替换构造函数</li><li>工厂：一个类，它知道如何创建对象。不过，如果我们给一个函数传入可创建的对象的参数（如函数或者类似的“对象”），那么这个参数也被称为工厂</li><li>抽象工厂：正如其名称所表示的意义，抽象类可以被具体类的类继承，由此产生了一个工厂类族。实际开发中抽象工厂很少见。</li></ul><p>相比调用构造函数，使用工厂有几个关键优势，即：</p><ul><li>工厂方法可以拒绝构建对象，也就是说，工厂可以返回默认初始化的智能指针，可以返回<code>optional&lt;T&gt;</code>或者空指针<code>nullptr</code>，而不是必须返回一个对象。</li><li>工厂方法可以是多态的，因此工厂方法可以返回基类或者基类的指针。使用其他方式（比如使用variant），工厂方法还可以支持返回不同的数据类型</li><li>与构造函数命名不同，工厂方法的命名不受约束并且可以更有意义，我们可以将其命名为任何名称。</li><li>工厂可以实现缓存和其他存储优化；对于诸如池或者单例模式之类的方法来说，这也是一种不错的选择</li><li>工厂可以将对象不同的关注点内容（比如验证代码）封装（即关注点分离）</li></ul><p>工厂模式与构造器模式的差别在于，使用工厂模式，我们可以一次创建一个完整的对象；而使用构造器模式，则需要分步提供对象的部分信息才能逐步完成一个对象的构建。</p><h1 id="原型模式"><a class="markdownIt-Anchor" href="#原型模式"></a> 原型模式</h1><h1 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h1>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/">Learn Design Patterns</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/Learn-Creational-Pattern/">Learn Creational Pattern</category>
      
      
      <category domain="http://example.com/tags/Creational-Pattern/">Creational Pattern</category>
      
      <category domain="http://example.com/tags/Design-Patterns/">Design Patterns</category>
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Reading-Note/">Reading Note</category>
      
      
      <comments>http://example.com/2023/07/30/design-patterns/creational-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SOLID 设计原则</title>
      <link>http://example.com/2023/07/29/design-patterns/solid/</link>
      <guid>http://example.com/2023/07/29/design-patterns/solid/</guid>
      <pubDate>Sat, 29 Jul 2023 03:14:22 GMT</pubDate>
      
      <description>记录设计模式中的SOLID设计原则</description>
      
      
      
      <content:encoded><![CDATA[<p>SOLID 是一个缩写，代表以下设计原则：</p><ul><li>单一职责原则（Single Responsibility Principle，SRP）</li><li>开闭原则（Open-Closed Principle，OCP）</li><li>里氏替换原则（Liskov Substitution Principle，LSP）</li><li>接口隔离原则（Interface Segregation Principle，ISP）</li><li>依赖倒转原则（Dependency Inversion Principle，DIP）</li></ul><p>这些原则是Robert C. Martin 在21世纪初提出的——实际上，这只是从Robert的著作和博客中阐述的几十条原则中选出来的5条</p><h1 id="单一职责原则"><a class="markdownIt-Anchor" href="#单一职责原则"></a> 单一职责原则</h1><p>每个类只有一个职责，因此也只有一个修改该类的原因（即只有该职责变化时，该类才做相应的修改）</p><p>违背单一职责原则的一个极端的反面模式被称为上帝对象（God Object）。上帝对象指的是承担了尽可能多的职责的庞大的类，是一个极其难以对付的庞大的“怪物”！</p><p>反面模式也是一种模式，不幸的是，他经常出现在代码中，以至于被广泛的认识。模式和反面模式的区别在于，反面模式通常是糟糕的设计的典型案例，它会导致代码难以理解，难以维护和难以重构。</p><h1 id="开闭原则"><a class="markdownIt-Anchor" href="#开闭原则"></a> 开闭原则</h1><p>开闭原则要求软件对拓展开放，对修改关闭。开闭原则的主旨是，我们不必返回到已编写和测试的代码来修改它。</p><h1 id="里氏替换原则"><a class="markdownIt-Anchor" href="#里氏替换原则"></a> 里氏替换原则</h1><p>以 Barbara Liskov 命名的里氏替换原则指出，如果某个接口以基类Parent类型的对象为参数，那么他应该同等地接受子类Child类对象作为参数，并且程序不会产生任何异常</p><p>如果子类重写了父类方法，处理父类的函数如果依赖父类中的该方法，其用于处理子类时就可能会出现异常</p><h1 id="接口隔离原则"><a class="markdownIt-Anchor" href="#接口隔离原则"></a> 接口隔离原则</h1><p>接口隔离原则的基本思想是将复杂的接口分离为多个单独的接口，以避免强制实现者必须实现某些它们并不需要的接口。任何时候，当我们要为某个复杂的应用程序编写插件时，如果要基于某个包含20个复杂功能的接口并且大部分接口实际上没有任何操作仅仅返回nullptr进行开发，那么这个API设计者很可能违背了接口隔离原则。</p><h1 id="依赖倒转原则"><a class="markdownIt-Anchor" href="#依赖倒转原则"></a> 依赖倒转原则</h1><p>依赖倒转原则的原始定义如下几点：</p><ul><li>高层模块不应该依赖低层模块，它们都应该依赖抽象接口。</li><li>抽象接口不应该依赖细节，细节应该依赖抽象接口。</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/">Learn Design Patterns</category>
      
      
      <category domain="http://example.com/tags/Design-Patterns/">Design Patterns</category>
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Reading-Note/">Reading Note</category>
      
      
      <comments>http://example.com/2023/07/29/design-patterns/solid/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>c++ 成员函数指针的一些知识</title>
      <link>http://example.com/2023/07/17/modern-cpp/modern-cpp-about-memfn-ptr/</link>
      <guid>http://example.com/2023/07/17/modern-cpp/modern-cpp-about-memfn-ptr/</guid>
      <pubDate>Mon, 17 Jul 2023 13:27:16 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/language/member_functions&quot;&gt;类的非静态成员函数&lt;/a&gt;它们的指针类型为&lt;code&gt;RetType (T::*)(ArgType...)&lt;/code&gt;，&lt;code&gt;T&lt;/code&gt;为该成员函数所属类的类型，&lt;code&gt;RetType&lt;/code&gt;和&lt;code&gt;ArgType&lt;/code&gt;分别指代返回值类型和参数类型。&lt;/p&gt;
&lt;p&gt;静态成员函数和普通函数无异，这里不做过多讨论&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/language/member_functions">类的非静态成员函数</a>它们的指针类型为<code>RetType (T::*)(ArgType...)</code>，<code>T</code>为该成员函数所属类的类型，<code>RetType</code>和<code>ArgType</code>分别指代返回值类型和参数类型。</p><p>静态成员函数和普通函数无异，这里不做过多讨论</p><span id="more"></span><h2 id="一些使用问题"><a class="markdownIt-Anchor" href="#一些使用问题"></a> 一些使用问题</h2><h3 id="如何识别非静态成员函数指针"><a class="markdownIt-Anchor" href="#如何识别非静态成员函数指针"></a> 如何识别非静态成员函数指针？</h3><p>可以使用<a href="https://zh.cppreference.com/w/cpp/types/is_member_function_pointer"><code>std::is_member_function_pointer&lt;FuncPtrType&gt;</code></a> 检查类型是否为指向非静态成员函数的指针</p><h3 id="如何通过非静态成员函数指针调用非静态成员函数"><a class="markdownIt-Anchor" href="#如何通过非静态成员函数指针调用非静态成员函数"></a> 如何通过非静态成员函数指针调用非静态成员函数？</h3><p>需要配合成员实例使用，可以这样：<code>pObject-&gt;*memFunPtr(ArgType...)</code></p><p>还可以使用<a href="https://zh.cppreference.com/w/cpp/utility/functional/invoke"><code>std::invoke</code></a> / <a href="https://zh.cppreference.com/w/cpp/utility/functional/invoke"><code>std::invoke_r</code></a>来调用，但要注意第一个参数要传所属类的实例指针，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_num</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="built_in">invoke</span>(&amp;Foo::print_num, foo, <span class="number">1</span>); <span class="comment">// print 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何存储为函数对象"><a class="markdownIt-Anchor" href="#如何存储为函数对象"></a> 如何存储为函数对象</h3><p><a href="https://zh.cppreference.com/w/cpp/utility/functional/mem_fn"><code>std::mem_fn</code></a>可以从成员指针创建出函数对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_greeting</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;你好。\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_number</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;数字：&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add_xy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data + x + y;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">add_many</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data + (args + ...);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">add_them</span><span class="params">(<span class="keyword">auto</span>... args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data + (args + ...);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> data = <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = Foo&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> greet = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_greeting);</span><br><span class="line">    <span class="built_in">greet</span>(f);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> print_num = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_number);</span><br><span class="line">    <span class="built_in">print_num</span>(f, <span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> access_data = std::<span class="built_in">mem_fn</span>(&amp;Foo::data);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;data：&quot;</span> &lt;&lt; <span class="built_in">access_data</span>(f) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> add_xy = std::<span class="built_in">mem_fn</span>(&amp;Foo::add_xy);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;add_xy：&quot;</span> &lt;&lt; <span class="built_in">add_xy</span>(f, <span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 用于智能指针</span></span><br><span class="line">    <span class="keyword">auto</span> u = std::<span class="built_in">make_unique</span>&lt;Foo&gt;();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;access_data(u)：&quot;</span> &lt;&lt; <span class="built_in">access_data</span>(u) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;add_xy(u, 1, 2)：&quot;</span> &lt;&lt; <span class="built_in">add_xy</span>(u, <span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 用于代形参包的成员函数模板</span></span><br><span class="line">    <span class="keyword">auto</span> add_many = std::<span class="built_in">mem_fn</span>(&amp;Foo::add_many&lt;<span class="type">short</span>, <span class="type">int</span>, <span class="type">long</span>&gt;);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;add_many(u, ...)：&quot;</span> &lt;&lt; <span class="built_in">add_many</span>(u, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">auto</span> add_them = std::<span class="built_in">mem_fn</span>(&amp;Foo::add_them&lt;<span class="type">short</span>, <span class="type">int</span>, <span class="type">float</span>, <span class="type">double</span>&gt;);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;add_them(u, ...)：&quot;</span> &lt;&lt; <span class="built_in">add_them</span>(u, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10.0f</span>, <span class="number">13.0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<a href="https://zh.cppreference.com/w/cpp/utility/functional/bind_front"><code>std::bind_front</code></a>来将<code>std::mem_fn</code>返回的函数对象封装成普通函数对象的相似形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = Foo&#123;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> greet = std::<span class="built_in">mem_fn</span>(&amp;Foo::display_greeting);</span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; greet_normal = std::<span class="built_in">bind_front</span>(greet,&amp;f);</span><br><span class="line">    <span class="built_in">greet_normal</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些技巧"><a class="markdownIt-Anchor" href="#一些技巧"></a> 一些技巧</h2><h3 id="从成员函数指针获取所属类的类型"><a class="markdownIt-Anchor" href="#从成员函数指针获取所属类的类型"></a> 从成员函数指针获取所属类的类型</h3><p>msvc编译器内部实现<code>std::_Is_memfunptr</code>可以做到这一点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_greeting</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;你好。\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> func = &amp;Foo::display_greeting;</span><br><span class="line">    <span class="keyword">using</span> Class_type = std::_Is_memfunptr&lt;<span class="keyword">decltype</span>(func)&gt;::_Class_type;</span><br><span class="line">    <span class="keyword">auto</span> f = Class_type&#123;&#125;;</span><br><span class="line">    f.<span class="built_in">display_greeting</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的实现如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Is_memfunptr</span> &#123; <span class="comment">// base class for member function pointer predicates</span></span><br><span class="line">    <span class="keyword">using</span> _Bool_type = false_type; <span class="comment">// NB: members are user-visible via _Weak_types</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IS_MEMFUNPTR(CALL_OPT, CV_OPT, REF_OPT, NOEXCEPT_OPT)                            \</span></span><br><span class="line"><span class="meta">    template <span class="string">&lt;class _Ret, class _Arg0, class... _Types&gt;</span>                                   \</span></span><br><span class="line"><span class="meta">    struct _Is_memfunptr<span class="string">&lt;_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT&gt;</span> \</span></span><br><span class="line"><span class="meta">        : _Arg_types<span class="string">&lt;CV_OPT _Arg0*, _Types...&gt;</span> &#123;                                          \</span></span><br><span class="line"><span class="meta">        using _Bool_type                                          = true_type;            \</span></span><br><span class="line"><span class="meta">        using _RESULT_TYPE_NAME _CXX17_DEPRECATE_ADAPTOR_TYPEDEFS = _Ret;                 \</span></span><br><span class="line"><span class="meta">        using _Class_type                                         = _Arg0;                \</span></span><br><span class="line"><span class="meta">        using _Guide_type = enable_if<span class="string">&lt;!is_same_v&lt;int REF_OPT, int&amp;&amp;&gt;</span>, _Ret(_Types...)&gt;;   \</span></span><br><span class="line"><span class="meta">    &#125;;</span></span><br><span class="line"></span><br><span class="line">_MEMBER_CALL_CV_REF_NOEXCEPT(_IS_MEMFUNPTR)</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _IS_MEMFUNPTR</span></span><br></pre></td></tr></table></figure><p>_Class_type是通过函数的第一个参数来获取的</p><h2 id="更多相关内容"><a class="markdownIt-Anchor" href="#更多相关内容"></a> 更多相关内容</h2><ul><li><p><a href="https://zh.cppreference.com/w/cpp/language/operator_member_access">成员访问运算符 - cppreference.com</a></p></li><li><p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/pointer-to-member-operators-dot-star-and-star?view=msvc-170">指向成员的指针运算符：“.<em>”和“-&gt;</em>” | Microsoft Learn</a></p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-c/">Learn c++</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/c/">c++</category>
      
      
      <comments>http://example.com/2023/07/17/modern-cpp/modern-cpp-about-memfn-ptr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Learn OpenGL] 项目详情</title>
      <link>http://example.com/2023/07/04/learn-opengl/project-details/</link>
      <guid>http://example.com/2023/07/04/learn-opengl/project-details/</guid>
      <pubDate>Tue, 04 Jul 2023 12:47:04 GMT</pubDate>
      
      <description>我的OpenGL学习项目的一些设定</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="组织"><a class="markdownIt-Anchor" href="#组织"></a> 组织</h1><p>项目sandbox包含以下内容</p><ul><li>display window 封装了窗口相关内容，包含opengl初始化，GLFW初始化，IMGUI初始化，窗口事件等</li><li>render 实现渲染相关内容，具体绘制</li><li>world 代表场景，存放光源（lightsource）、相机（camera）、渲染实体（model）等，它们都以actor实现</li><li>actor 放置在场景里面的所有实体都是actor</li><li>lightsource 对光源的抽象</li><li>camera 对相机的抽象，每个相机对应一个render</li><li>model 可绘制模型</li><li>shader 着色器的抽象，包含顶点着色器和片段着色器</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/">Learn OpenGL</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/OpenGL/">OpenGL</category>
      
      
      <comments>http://example.com/2023/07/04/learn-opengl/project-details/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Learn OpenGL] 基础知识</title>
      <link>http://example.com/2023/07/04/learn-opengl/basic-knowledge/</link>
      <guid>http://example.com/2023/07/04/learn-opengl/basic-knowledge/</guid>
      <pubDate>Tue, 04 Jul 2023 11:39:39 GMT</pubDate>
      
      <description>OpenGL 的一些基础问题</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="问答"><a class="markdownIt-Anchor" href="#问答"></a> 问答</h1><h2 id="缓冲绑定点是什么"><a class="markdownIt-Anchor" href="#缓冲绑定点是什么"></a> 缓冲绑定点是什么？</h2><p>缓冲绑定点是OpenGL中用于绑定缓冲对象的位置或目标。缓冲对象可以存储各种类型的数据，如顶点数据、索引数据、Uniform数据等。缓冲绑定点提供了一种将指定类型的缓冲对象与特定的目标位置相关联的方式，使得OpenGL可以正确地使用这些缓冲对象中的数据。</p><p>在OpenGL中，常见的缓冲绑定点包括：</p><ol><li>顶点缓冲对象绑定点（Vertex Buffer Object Binding Point）：用于将顶点缓冲对象绑定到顶点属性的位置，以供顶点着色器读取顶点数据。</li><li>索引缓冲对象绑定点（Index Buffer Object Binding Point）：用于将索引缓冲对象绑定到绘制命令中的索引数据位置，以供绘制命令使用。</li><li>Uniform缓冲对象绑定点（Uniform Buffer Object Binding Point）：用于将Uniform缓冲对象绑定到着色器程序中的Uniform变量位置，以供着色器程序读取Uniform数据。</li><li>纹理缓冲对象绑定点（Texture Buffer Object Binding Point）：用于将纹理缓冲对象绑定到纹理单元，以供着色器程序读取纹理数据。</li></ol><p>在使用缓冲对象时，我们需要将缓冲对象绑定到相应的缓冲绑定点上，这样OpenGL才能正确地使用缓冲对象中的数据。而绑定缓冲对象则是通过使用对应的glBindBuffer函数实现的。</p><h2 id="opengl状态机内部数据是如何分布的"><a class="markdownIt-Anchor" href="#opengl状态机内部数据是如何分布的"></a> opengl状态机内部数据是如何分布的？</h2><p>OpenGL的内部状态由一系列数据和状态变量组成，这些变量存储了OpenGL的各种配置选项、当前绑定的对象和各种状态信息。下面是一些常见的OpenGL状态：</p><ol><li>渲染管线状态（Pipeline State）：包括顶点输入状态、光栅化状态、片段处理状态等。这些状态存储了OpenGL的渲染管线各个阶段的配置选项和设置。</li><li>缓冲绑定状态（Buffer Binding State）：存储了顶点缓冲对象、索引缓冲对象和Uniform缓冲对象等的绑定信息。这些状态记录了当前绑定的缓冲对象的相关属性和数据。</li><li>纹理绑定状态（Texture Binding State）：存储了纹理对象的绑定信息，包括2D纹理、立方体贴图、多重采样纹理等。这些状态记录了当前绑定的纹理对象的相关属性和数据。</li><li>着色器程序状态（Shader Program State）：存储了当前着色器程序的相关信息，包括顶点着色器、片段着色器、几何着色器等。这些状态记录了当前使用的着色器程序的相关属性和数据。</li><li>内存管理状态（Memory Management State）：存储了OpenGL中的内存对象，包括帧缓冲对象、渲染缓冲对象等。这些状态记录了当前内存对象的相关属性和数据。</li><li>视口状态（Viewport State）：存储了OpenGL绘制的视口的相关信息，包括视口的位置和大小。这些状态记录了当前视口的相关属性和数据。</li></ol><p>这些状态和数据被保存在OpenGL当前的上下文中。当我们使用OpenGL API来修改这些状态时，实际上是在修改当前上下文中的对应变量的值。因此，在使用OpenGL时，我们通常会对这些状态进行配置和修改，以达到期望的渲染效果。</p><p>当我们使用OpenGL进行渲染时，需要对一些重要的状态进行配置和修改，以控制渲染的各个方面。下面是一些常见的OpenGL状态的详细说明：</p><ol><li>渲染管线状态（Pipeline State）：包括顶点输入状态、光栅化状态、片段处理状态等。顶点输入状态包括顶点属性缓冲对象的绑定、顶点属性的格式和布局等。光栅化状态包括光栅化模式、剔除模式、多边形模式等。片段处理状态包括混合模式、深度测试、模板测试等。通过配置这些状态，我们可以控制渲染管线各个阶段的行为。</li><li>缓冲绑定状态（Buffer Binding State）：存储了顶点缓冲对象、索引缓冲对象和Uniform缓冲对象的绑定信息。顶点缓冲对象用于存储顶点数据，索引缓冲对象用于存储索引数据，Uniform缓冲对象用于存储着色器程序中的Uniform变量数据。通过绑定不同的缓冲对象，我们可以在渲染时使用不同的数据。</li><li>纹理绑定状态（Texture Binding State）：存储了纹理对象的绑定信息，包括2D纹理、立方体贴图、多重采样纹理等。纹理对象用于存储图像数据，我们可以通过绑定不同的纹理对象来渲染不同的纹理。</li><li>着色器程序状态（Shader Program State）：存储了当前着色器程序的相关信息，包括顶点着色器、片段着色器、几何着色器等。通过配置这些着色器程序，我们可以自定义渲染的算法和效果。</li><li>内存管理状态（Memory Management State）：存储了OpenGL中的内存对象，包括帧缓冲对象、渲染缓冲对象等。通过配置这些内存对象，我们可以定义渲染的目标和方式。</li><li>视口状态（Viewport State）：存储了OpenGL绘制的视口的相关信息，包括视口的位置和大小。通过配置视口，我们可以控制渲染的输出区域和分辨率。</li></ol><p>这些状态的配置和修改通常通过OpenGL API的函数来实现。在使用OpenGL时，我们需要根据具体的需求和场景，对这些状态进行适当的配置和修改，以获得期望的渲染效果。同时，我们还可以通过查询OpenGL的当前状态，了解当前渲染的相关信息，以便进行调试和优化。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/">Learn OpenGL</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/OpenGL/">OpenGL</category>
      
      
      <comments>http://example.com/2023/07/04/learn-opengl/basic-knowledge/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
