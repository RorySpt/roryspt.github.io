<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RorySpt 个人资料站</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>不积跬步，无以至千里；不积小流，无以成江海</description>
    <pubDate>Sun, 22 Oct 2023 14:32:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>socket example</title>
      <link>http://example.com/2023/10/22/learn-socket/example/</link>
      <guid>http://example.com/2023/10/22/learn-socket/example/</guid>
      <pubDate>Sun, 22 Oct 2023 14:11:47 GMT</pubDate>
      
      <description>Socket 的使用示例</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="servercpp"><a class="markdownIt-Anchor" href="#servercpp"></a> server.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">undef</span> UNICODE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string_view&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;format&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread_pool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Need to link with Ws2_32.lib</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">// #pragma comment (lib, &quot;Mswsock.lib&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_BUFLEN 512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_PORT <span class="string">&quot;27015&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">SOCKET <span class="title">open_listenfd</span><span class="params">(std::string_view port)</span></span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">auto</span> make_hints = [](<span class="type">int</span> ai_flags = <span class="number">0</span>, <span class="type">int</span> ai_family = <span class="number">0</span>, <span class="type">int</span> ai_socktype = <span class="number">0</span>, <span class="type">int</span> ai_protocol = <span class="number">0</span>) <span class="keyword">constexpr</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> addrinfo&#123;</span><br><span class="line">            .ai_flags = <span class="number">0</span>,</span><br><span class="line">            .ai_family = ai_family,</span><br><span class="line">            .ai_socktype = ai_socktype,</span><br><span class="line">            .ai_protocol = ai_protocol,</span><br><span class="line">            .ai_addrlen = <span class="number">0</span>,</span><br><span class="line">            .ai_canonname = <span class="number">0</span>,</span><br><span class="line">            .ai_addr = <span class="literal">nullptr</span>,</span><br><span class="line">            .ai_next = <span class="literal">nullptr</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">constexpr</span> addrinfo hints = <span class="built_in">make_hints</span>(AI_PASSIVE, AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    addrinfo *result = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">// Resolve the server address and port</span></span><br><span class="line">    <span class="type">int</span> iResult = <span class="built_in">getaddrinfo</span>(<span class="literal">nullptr</span>, port.<span class="built_in">data</span>(), &amp;hints, &amp;result);</span><br><span class="line">    <span class="keyword">if</span> ( iResult != <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;getaddrinfo failed with error: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a SOCKET for the server to listen for client connections.</span></span><br><span class="line">    SOCKET ListenSocket = <span class="built_in">socket</span>(result-&gt;ai_family, result-&gt;ai_socktype, result-&gt;ai_protocol);</span><br><span class="line">    <span class="keyword">if</span> (ListenSocket == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;socket failed with error: %ld\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">        <span class="built_in">freeaddrinfo</span>(result);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup the TCP listening socket</span></span><br><span class="line">    iResult = <span class="built_in">bind</span>( ListenSocket, result-&gt;ai_addr, (<span class="type">int</span>)result-&gt;ai_addrlen);</span><br><span class="line">    <span class="keyword">if</span> (iResult == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bind failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">        <span class="built_in">freeaddrinfo</span>(result);</span><br><span class="line">        <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(result);</span><br><span class="line"></span><br><span class="line">    iResult = <span class="built_in">listen</span>(ListenSocket, SOMAXCONN);</span><br><span class="line">        <span class="keyword">if</span> (iResult == SOCKET_ERROR) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;listen failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">            <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">            <span class="built_in">WSACleanup</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ListenSocket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    SOCKET ClientSocket = INVALID_SOCKET;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    <span class="comment">// Initialize Winsock</span></span><br><span class="line">    iResult = <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>,<span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed with error: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SOCKET ListenSocket = <span class="built_in">open_listenfd</span>(DEFAULT_PORT);</span><br><span class="line">    <span class="keyword">if</span> (ListenSocket == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="built_in">WSACleanup</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ThreadPool thread_pool;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">         <span class="comment">// Accept a client socket</span></span><br><span class="line">        SOCKET ClientSocket = <span class="built_in">accept</span>(ListenSocket, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">if</span> (ClientSocket == INVALID_SOCKET) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;accept failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">            <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">            <span class="built_in">WSACleanup</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        thread_pool.<span class="built_in">submit</span>([=]()&#123;</span><br><span class="line">            <span class="type">int</span> iSendResult;</span><br><span class="line">            <span class="type">char</span> recvbuf[DEFAULT_BUFLEN];</span><br><span class="line">            <span class="type">int</span> recvbuflen = DEFAULT_BUFLEN;</span><br><span class="line"></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;this thread: &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">10</span>));</span><br><span class="line">            <span class="comment">// Receive until the peer shuts down the connection</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> iResult = <span class="built_in">recv</span>(ClientSocket, recvbuf, recvbuflen, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    std::cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Bytes received: %d\n&quot;</span>, iResult);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Echo the buffer back to the sender</span></span><br><span class="line">                    iSendResult = <span class="built_in">send</span>( ClientSocket, recvbuf, iResult, <span class="number">0</span> );</span><br><span class="line">                    <span class="keyword">if</span> (iSendResult == SOCKET_ERROR) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;send failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">                        <span class="built_in">closesocket</span>(ClientSocket);</span><br><span class="line">                        <span class="built_in">WSACleanup</span>();</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                     std::cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Bytes sent: %d\n&quot;</span>, iSendResult);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>)&#123;</span><br><span class="line">                    std::cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  &#123;</span><br><span class="line">                    std::cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;recv failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">                    <span class="built_in">closesocket</span>(ClientSocket);</span><br><span class="line">                    <span class="built_in">WSACleanup</span>();</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">while</span> (iResult &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// shutdown the connection since we&#x27;re done</span></span><br><span class="line">            <span class="type">int</span> iResult = <span class="built_in">shutdown</span>(ClientSocket, SD_SEND);</span><br><span class="line">            <span class="keyword">if</span> (iResult == SOCKET_ERROR) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;shutdown failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">                <span class="built_in">closesocket</span>(ClientSocket);</span><br><span class="line">                <span class="built_in">WSACleanup</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cleanup</span></span><br><span class="line">            <span class="built_in">closesocket</span>(ClientSocket);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    thread_pool.<span class="built_in">wait_for_done</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No longer need server socket</span></span><br><span class="line">    <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="clientcpp"><a class="markdownIt-Anchor" href="#clientcpp"></a> client.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;wsock32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> DEFAULT_BUFLEN = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">constexpr</span> std::string_view DEFAULT_PORT = <span class="string">&quot;27015&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SOCKET <span class="title">open_clientfd</span><span class="params">(std::string_view hostname, std::string_view port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">auto</span> make_hints = [](<span class="type">int</span> ai_flags = <span class="number">0</span>, <span class="type">int</span> ai_family = <span class="number">0</span>, <span class="type">int</span> ai_socktype = <span class="number">0</span>, <span class="type">int</span> ai_protocol = <span class="number">0</span>) <span class="keyword">constexpr</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> addrinfo&#123;</span><br><span class="line">            .ai_flags = <span class="number">0</span>,</span><br><span class="line">            .ai_family = ai_family,</span><br><span class="line">            .ai_socktype = ai_socktype,</span><br><span class="line">            .ai_protocol = ai_protocol,</span><br><span class="line">            .ai_addrlen = <span class="number">0</span>,</span><br><span class="line">            .ai_canonname = <span class="number">0</span>,</span><br><span class="line">            .ai_addr = <span class="literal">nullptr</span>,</span><br><span class="line">            .ai_next = <span class="literal">nullptr</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">constexpr</span> addrinfo hints = <span class="built_in">make_hints</span>(<span class="number">0</span>, AF_UNSPEC, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    addrinfo *p_addrinfo = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">// Resolve the server address and port</span></span><br><span class="line">    <span class="type">int</span> result_code = <span class="built_in">getaddrinfo</span>(hostname.<span class="built_in">data</span>(), port.<span class="built_in">data</span>(), &amp;hints, &amp;p_addrinfo);</span><br><span class="line">    <span class="keyword">if</span> (result_code != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;getaddrinfo failed with error: %d\n&quot;</span>, result_code);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SOCKET socket_handle = INVALID_SOCKET;</span><br><span class="line">    <span class="comment">// Attempt to connect to an address until one succeeds</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ptr = p_addrinfo; ptr != <span class="literal">nullptr</span>; ptr = ptr-&gt;ai_next)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a SOCKET for connecting to server</span></span><br><span class="line">        socket_handle = <span class="built_in">socket</span>(ptr-&gt;ai_family, ptr-&gt;ai_socktype,</span><br><span class="line">                               ptr-&gt;ai_protocol);</span><br><span class="line">        <span class="keyword">if</span> (socket_handle == INVALID_SOCKET)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;socket failed with error: %ld\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">            <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connect to server.</span></span><br><span class="line">        result_code = <span class="built_in">connect</span>(socket_handle, ptr-&gt;ai_addr, (<span class="type">int</span>)ptr-&gt;ai_addrlen);</span><br><span class="line">        <span class="keyword">if</span> (result_code == SOCKET_ERROR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">closesocket</span>(socket_handle);</span><br><span class="line">            socket_handle = INVALID_SOCKET;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(p_addrinfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> socket_handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Validate the parameters</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage: %s server-name\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WSADATA wsa_data;</span><br><span class="line">    <span class="comment">// Initialize Winsock</span></span><br><span class="line">    <span class="type">int</span> result_code = <span class="built_in">WSAStartup</span>(<span class="built_in">static_cast</span>&lt;WORD&gt;((<span class="number">2U</span> &lt;&lt; <span class="number">8</span>) + <span class="number">2U</span>), &amp;wsa_data);</span><br><span class="line">    <span class="keyword">if</span> (result_code != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed with error: %d\n&quot;</span>, result_code);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a connection to the server</span></span><br><span class="line">    SOCKET connected_socket = <span class="built_in">open_clientfd</span>(argv[<span class="number">1</span>], DEFAULT_PORT);</span><br><span class="line">    <span class="keyword">if</span> (connected_socket == INVALID_SOCKET)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unable to connect to server!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">WSACleanup</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string_view sendbuf = <span class="string">&quot;this is a test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send an initial buffer</span></span><br><span class="line">    result_code = <span class="built_in">send</span>(connected_socket, sendbuf.<span class="built_in">data</span>(), <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(sendbuf.<span class="built_in">size</span>()), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (result_code == SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">        <span class="built_in">closesocket</span>(connected_socket);</span><br><span class="line">        <span class="built_in">WSACleanup</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bytes Sent: %ld\n&quot;</span>, result_code);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown the connection since no more data will be sent</span></span><br><span class="line">    result_code = <span class="built_in">shutdown</span>(connected_socket, SD_SEND);</span><br><span class="line">    <span class="keyword">if</span> (result_code == SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;shutdown failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">        <span class="built_in">closesocket</span>(connected_socket);</span><br><span class="line">        <span class="built_in">WSACleanup</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::array&lt;<span class="type">char</span>, DEFAULT_BUFLEN&gt; recvbuf;</span><br><span class="line">    <span class="comment">// Receive until the peer closes the connection</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        result_code = <span class="built_in">recv</span>(connected_socket, recvbuf.<span class="built_in">data</span>(), <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(recvbuf.<span class="built_in">size</span>()), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (result_code &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Bytes received: %d\n&quot;</span>, result_code);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (result_code == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recv failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (result_code &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cleanup</span></span><br><span class="line">    <span class="built_in">closesocket</span>(connected_socket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="thread_poolh"><a class="markdownIt-Anchor" href="#thread_poolh"></a> thread_pool.h</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_TEST</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;synced_stream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span>  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>(std::<span class="type">size_t</span> n = std::thread::<span class="built_in">hardware_concurrency</span>())</span><br><span class="line">:_thread_count(n)</span><br><span class="line">&#123;</span><br><span class="line">_initialize_threads();</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line">_destroy_threads();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ThreadPool</span>(<span class="type">const</span> ThreadPool&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">ThreadPool&amp; <span class="keyword">operator</span>=(<span class="type">const</span> ThreadPool&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>  Callable, <span class="keyword">typename</span> ...Args&gt; <span class="keyword">requires</span> std::is_invocable_v&lt;Callable, Args...&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">submit</span><span class="params">(Callable&amp;&amp; func, Args&amp;&amp; ...args)</span> -&gt; std::future&lt;std::<span class="type">invoke_result_t</span>&lt;Callable, Args...&gt;&gt;</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> ReturnType = std::<span class="type">invoke_result_t</span>&lt;Callable, Args...&gt;;</span><br><span class="line"><span class="keyword">auto</span> promise = std::make_shared&lt;std::promise&lt;ReturnType&gt;&gt;();</span><br><span class="line"><span class="keyword">auto</span> future = promise-&gt;<span class="built_in">get_future</span>();</span><br><span class="line"><span class="function">std::lock_guard <span class="title">guard</span><span class="params">(_task_mutex)</span></span>;</span><br><span class="line">_task_deq.<span class="built_in">emplace_back</span>([=]()<span class="keyword">mutable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">constexpr</span> (!std::is_void_v&lt;ReturnType&gt;) &#123;</span><br><span class="line">promise-&gt;<span class="built_in">set_value</span>(std::<span class="built_in">invoke_r</span>&lt;ReturnType&gt;(func</span><br><span class="line">, std::forward&lt;Args&gt;(args)...));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::<span class="built_in">invoke</span>(func, std::forward&lt;Args&gt;(args)...);</span><br><span class="line">promise-&gt;<span class="built_in">set_value</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">cv.<span class="built_in">notify_one</span>();</span><br><span class="line"><span class="keyword">return</span> future;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] <span class="function"><span class="type">size_t</span> <span class="title">get_thread_count</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _thread_count; &#125;</span><br><span class="line">[[nodiscard]] <span class="function"><span class="type">size_t</span> <span class="title">get_active_count</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _active_count; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait_for_done</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::unique_lock <span class="title">unique_lock</span><span class="params">(_task_mutex)</span></span>;</span><br><span class="line">cv_wait_done.<span class="built_in">wait</span>(unique_lock, [<span class="keyword">this</span>]&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_active_count</span>() == <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _initialize_threads()</span><br><span class="line">&#123;</span><br><span class="line">_threads.<span class="built_in">resize</span>(_thread_count);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; thread : _threads)</span><br><span class="line">&#123;</span><br><span class="line">thread = std::<span class="built_in">jthread</span>([<span class="keyword">this</span>](<span class="type">const</span> std::stop_token&amp; stop_token)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">std::unique_lock <span class="built_in">unique_lock</span>(_task_mutex);</span><br><span class="line">cv.<span class="built_in">wait</span>(unique_lock, [&amp;] &#123;</span><br><span class="line"><span class="keyword">return</span> !_task_deq.<span class="built_in">empty</span>() || stop_token.<span class="built_in">stop_requested</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (stop_token.<span class="built_in">stop_requested</span>()) <span class="keyword">return</span>;</span><br><span class="line">++_active_count;</span><br><span class="line"><span class="keyword">auto</span> task = std::<span class="built_in">move</span>(_task_deq.<span class="built_in">back</span>());</span><br><span class="line">_task_deq.<span class="built_in">pop_back</span>();</span><br><span class="line">unique_lock.<span class="built_in">unlock</span>();</span><br><span class="line">std::<span class="built_in">invoke</span>(task);</span><br><span class="line">unique_lock.<span class="built_in">lock</span>();</span><br><span class="line">--_active_count;</span><br><span class="line">cv_wait_done.<span class="built_in">notify_one</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _destroy_threads()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; thread : _threads)</span><br><span class="line">&#123;</span><br><span class="line">thread.<span class="built_in">request_stop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; thread : _threads)</span><br><span class="line">&#123;</span><br><span class="line">thread.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::condition_variable cv;</span><br><span class="line">std::condition_variable cv_wait_done;</span><br><span class="line">std::mutex _task_mutex;</span><br><span class="line">std::deque&lt;std::function&lt;<span class="type">void</span>()&gt;&gt; _task_deq;</span><br><span class="line">std::vector&lt;std::jthread&gt; _threads;</span><br><span class="line">std::<span class="type">size_t</span> _thread_count;</span><br><span class="line">std::<span class="type">size_t</span> _active_count = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_TEST</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">thread_pool_unit_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ThreadPool pool;</span><br><span class="line">std::vector&lt;std::future&lt;<span class="type">int</span>&gt;&gt; futures;</span><br><span class="line"><span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pool.<span class="built_in">get_thread_count</span>(); ++i)</span><br><span class="line">futures.<span class="built_in">emplace_back</span>(pool.<span class="built_in">submit</span>([=]()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> clock = std::chrono::high_resolution_clock;</span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> tp = clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (clock::<span class="built_in">now</span>() - tp &lt; std::chrono::<span class="built_in">seconds</span>(<span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line">sync::<span class="built_in">println</span>(<span class="string">&quot;I&#x27;m thread &#123;&#125;&quot;</span>, i);</span><br><span class="line">std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; future : futures)</span><br><span class="line">&#123;</span><br><span class="line">future.<span class="built_in">wait</span>();</span><br><span class="line">&#125;</span><br><span class="line">sync::<span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; future : futures)</span><br><span class="line">&#123;</span><br><span class="line">sync::<span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &quot;</span>, future.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line">sync::<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ <span class="literal">-o</span> server server.cpp <span class="literal">-lws2_32</span> <span class="literal">-std</span>=c++<span class="number">23</span></span><br><span class="line">g++ <span class="literal">-o</span> client client.cpp <span class="literal">-lws2_32</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Socket/">Socket</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Socket/">Socket</category>
      
      
      <comments>http://example.com/2023/10/22/learn-socket/example/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql example</title>
      <link>http://example.com/2023/10/22/learn-mysql/example/</link>
      <guid>http://example.com/2023/10/22/learn-mysql/example/</guid>
      <pubDate>Sun, 22 Oct 2023 13:54:17 GMT</pubDate>
      
      <description>MySql 的使用示例</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="mysqlcpp"><a class="markdownIt-Anchor" href="#mysqlcpp"></a> mysql.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mysql.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt; <span class="string">&quot;hello world&quot;</span>&lt;&lt;std::endl;</span><br><span class="line"><span class="comment">///&lt; 创建数据库句柄</span></span><br><span class="line">MYSQL mysql;</span><br><span class="line"><span class="comment">//MYSQL *mysql = mysql_init(nullptr);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">///&lt; 初始化句柄</span></span><br><span class="line"><span class="built_in">mysql_init</span>(&amp;mysql);</span><br><span class="line"></span><br><span class="line"><span class="comment">///&lt; 连接的数据库（句柄、主机名、用户名、密码、数据库名、端口号、socket指针、标记）</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">mysql_real_connect</span>(&amp;mysql, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;mysql&quot;</span>, <span class="number">3306</span>, <span class="literal">nullptr</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据库连接失败&quot;</span> &lt;&lt; <span class="built_in">mysql_errno</span>(&amp;mysql) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据库连接成功&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">///&lt; 创建数据库回应结构体</span></span><br><span class="line">MYSQL_RES *res = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">///&lt; 创建存放结果的结构体</span></span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> sql[<span class="number">1024</span>]&#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf_s</span>(sql, <span class="number">1024</span>, <span class="string">&quot;SELECT *FROM `mysql`.`help_topic` LIMIT 0 ,10&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">///&lt; 调用查询接口</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_query</span>(&amp;mysql, sql, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">strlen</span>(sql)))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查询失败&quot;</span> &lt;&lt; <span class="string">&quot;: &quot;</span>  &lt;&lt; <span class="built_in">mysql_errno</span>(&amp;mysql) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查询成功&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">///&lt; 装载结果集</span></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(&amp;mysql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == res)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;装载数据失败&quot;</span> &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; <span class="built_in">mysql_errno</span>(&amp;mysql)  &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">auto</span> count = <span class="built_in">mysql_field_count</span>(&amp;mysql);</span><br><span class="line"><span class="comment">///&lt; 取出结果集中内容</span></span><br><span class="line"><span class="keyword">while</span> (row = <span class="built_in">mysql_fetch_row</span>(res))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; row[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;  &quot;</span>  &lt;&lt; row[<span class="number">1</span>]&lt;&lt; <span class="string">&quot;  &quot;</span>  &lt;&lt; row[<span class="number">2</span>]&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///&lt; 释放结果集</span></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">///&lt; 关闭数据库连接</span></span><br><span class="line"><span class="built_in">mysql_close</span>(&amp;mysql);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h1><p>将mysql安装目录中的include和lib拷贝到当前目录，然后执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ <span class="literal">-o</span> mysql main.cpp <span class="literal">-L</span> lib <span class="literal">-I</span> include <span class="literal">-l</span> libmysql</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/MySql/">MySql</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/MySql/">MySql</category>
      
      
      <comments>http://example.com/2023/10/22/learn-mysql/example/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Light and Shadow</title>
      <link>http://example.com/2023/09/25/learn-opengl/shader/light-and-shadow/</link>
      <guid>http://example.com/2023/09/25/learn-opengl/shader/light-and-shadow/</guid>
      <pubDate>Mon, 25 Sep 2023 02:05:50 GMT</pubDate>
      
      <description>GLSL 光照和阴影</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="光照"><a class="markdownIt-Anchor" href="#光照"></a> 光照</h1><p>OpenGL 着色器程序几乎允许在场景实现光源的无限可能性。</p><h1 id="经典光照模型"><a class="markdownIt-Anchor" href="#经典光照模型"></a> 经典光照模型</h1><p>经典光照模型通过单独计算光源成分得到综合光照效果，然后添加到材质表面特定点。这些成分包括环境光，漫反射和镜面光。</p><p>环境光是不来自任何特定的方向的光。在整个场景中经典光照模型把它当成一个常量，组成一个合适的第一近似值来缩放场景中的光照成分。计算这个光照并不涉及任何关于光源方向或者眼睛观察场景的方向。它也可以当成积累每个光源的基础贡献值或者当成预先计算的单一全局效果。</p><p>漫反射光是散射在各个方向上均匀的表面特定的光源。漫反射光通过光照照亮才能看到表面，即使这个表面没有直接将光源反射到你的眼睛。它跟眼睛方向没有关系，但是跟光源方向有关系。当表面直接面向光源时，那么看起来会亮一点，仅仅因外在这个方向上比在倾斜方向上可以收集更多的光。漫反射光依赖于表面法线方向和光源方向来计算，但没有包含视线方向。它同样依赖于表面的颜色。</p><p>镜面光是由表面直接反射的高亮光。这个高亮就像镜子一样，跟表面材质多少有关。一个高度抛光的金属球能反射一个非常尖锐明亮的镜面高光，而一个磨砂的表面可以反射更大、更暗的镜面亮光，以及一个布球则一点都没有反射。这个特定角度效果的强度简称为光泽度（shininess）。计算镜面高光需要知道表面方向的近似度，也就是在光源和眼睛方向之间的直接反射大小，因此他需要知道表面法线、光源的方向和眼睛的方向。镜面高光可能结合或者不结合表面颜色。作为第一个近似值，它在不涉及任何表面颜色时会显得更真实。不管怎么说基础的颜色都会存在漫反射选项，给予它正确的色彩。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/">Learn OpenGL</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/Shading/">Shading</category>
      
      
      <category domain="http://example.com/tags/OpenGL/">OpenGL</category>
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Shading/">Shading</category>
      
      
      <comments>http://example.com/2023/09/25/learn-opengl/shader/light-and-shadow/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GLSL Overview</title>
      <link>http://example.com/2023/09/25/learn-opengl/shader/glsl-overview/</link>
      <guid>http://example.com/2023/09/25/learn-opengl/shader/glsl-overview/</guid>
      <pubDate>Mon, 25 Sep 2023 02:05:50 GMT</pubDate>
      
      <description>GLSL 概述</description>
      
      
      
      <content:encoded><![CDATA[<p>4.5版本的图形渲染管线有4个处理阶段，还有一个通用计算阶段，每个阶段都需要由一个专门的着色器进行控制。</p><ol><li>顶点着色阶段（vertex shading stage）</li><li>细分着色阶段（tessellation shading stage）</li><li>几何着色阶段（geometry shading stage）</li><li>片元着色阶段（fragment shading stage）</li><li>计算着色阶段（compute shading stage）</li></ol><p>一个重要的概念就是着色器阶段之间数据传输方式。着色器类似一个函数调用的方式——数据传输进来，经过处理，然后再传输出去。在C语言中，这一过程可以通过全局变量，或者函数参数来完成。GLSL与之稍有差异。每个着色器看起来都像是一个完整的C程序，它的输入点就是一个名为main()的函数。但与C不同的是，GLSL的main()函数没有任何参数，在某个着色器阶段中输入和输出的所有数据都是通过着色器中特殊全局变量来传递的。</p><h1 id="变量的声明"><a class="markdownIt-Anchor" href="#变量的声明"></a> 变量的声明</h1><p>GLSL是一种强类型语言，所有变量都必须事先声明，并且要给出变量的类型。</p><p>GLSL中的基本数据类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>float</td><td>IEEE32位浮点数</td></tr><tr><td>double</td><td>IEEE64位浮点数</td></tr><tr><td>int</td><td>有符号二进制补码的32位整数</td></tr><tr><td>uint</td><td>无符号的32位整数</td></tr><tr><td>bool</td><td>布尔值</td></tr></tbody></table><p>这些类型（以及它们的聚合类型）都是透明的。也就是说，它们内部形式都是暴露出来的，因此着色器代码中可以假设其内部的构成方式。</p><p>与之对应的一部分类型，称作不透明类型，它们内部形式没有透露出来，这些类型包括（sampler）、图像（image），以及原子计数器（atomic counter）。它们所声明的变量相当于一个不透明的句柄，可以用来读取纹理贴图、图像，以及原子计数器数据。</p><h1 id="聚合类型"><a class="markdownIt-Anchor" href="#聚合类型"></a> 聚合类型</h1><p>GLSL的基本类型可以进行合并，从而与核心OpenGL的数据类型相匹配，以及简化计算过程的操作。</p><p>首先，GLSL支持2个、3个以及4个分量的向量，每个分量都可以使用bool、int、uint、float 和 double 这些基本类型。此外，GLSL也支持float和double类型的矩阵。</p><p>GLSL的向量与矩阵类型：</p><table  style="text-align:center;"><tr>    <th align="center">基本类型</th>    <th>2D向量</th>    <th>3D向量</th>          <th>4D向量</th>          <th colspan="3">矩阵类型</th>  </tr ><tr >    <td rowspan="4">float</td>    <td rowspan="4">vec2</td>    <td rowspan="4">vec3</td>        <td rowspan="4">vec4</td>        <td>mat2</td>        <td>mat3</td>        <td>mat4</td></tr><tr>    <td>mat2x2</td>        <td>mat2x3</td>        <td>mat2x4</td></tr><tr>    <td>mat3x2</td>        <td>mat3x3</td>        <td>mat3x4</td></tr>    <tr>    <td>mat4x2</td>        <td>mat4x3</td>        <td>mat4x4</td></tr>    <tr >    <td rowspan="4">double</td>    <td rowspan="4">dvec2</td>    <td rowspan="4">dvec3</td>        <td rowspan="4">dvec4</td>        <td>dmat2</td>        <td>dmat3</td>        <td>dmat4</td></tr><tr>    <td>dmat2x2</td>        <td>dmat2x3</td>        <td>dmat2x4</td></tr><tr>    <td>dmat3x2</td>        <td>dmat3x3</td>        <td>dmat3x4</td></tr>    <tr>    <td>dmat4x2</td>        <td>dmat4x3</td>        <td>dmat4x4</td></tr> <tr >    <td>int</td>    <td>ivec2</td>    <td>ivec3</td>        <td>ivec4</td>        <td colspan="3">——</td></tr>    <tr >    <td>uint</td>    <td>uvec2</td>    <td>uvec3</td>        <td>uvec4</td>        <td colspan="3">——</td></tr>     <tr >    <td>bool</td>    <td>bvec2</td>    <td>bvec3</td>        <td>bvec4</td>         <td colspan="3">——</td></tr></table><h1 id="访问向量和矩阵中的元素"><a class="markdownIt-Anchor" href="#访问向量和矩阵中的元素"></a> 访问向量和矩阵中的元素</h1><p>向量与矩阵中的元素是可以单独访问和设置的。向量支持两种类型的元素访问方式：使用分量的名称，或者数组访问的形式。矩阵可以以二维数组的形式访问。</p><p>向量分量的访问符：</p><table><thead><tr><th>分量访问符</th><th>符号描述</th></tr></thead><tbody><tr><td>（x，y，z，w）</td><td>与位置相关的分量</td></tr><tr><td>（r，g，b，a）</td><td>与颜色相关的分量</td></tr><tr><td>（s，t，p，q）</td><td>与纹理坐标相关的分量</td></tr></tbody></table><h1 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h1><p>可以从逻辑上将不同类型的数据组合到一个结构体当中。结构体可以简化多组数据传入函数的过程。如果定义了一个结构体，那么他会自动创建一个新类型，并且隐式定义一个构造函数，将各种类型的结构体元素作为输入参数。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Particle&#123;</span><br><span class="line">    <span class="type">float</span> lifetime;</span><br><span class="line">    <span class="type">vec3</span> position;</span><br><span class="line">    <span class="type">vec3</span> velocity;</span><br><span class="line">&#125;</span><br><span class="line">Particle p = Particle(<span class="number">10.0</span>, pos, vel); <span class="comment">// pos、vel 均为 vec3s 类型 </span></span><br></pre></td></tr></table></figure><h1 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h1><p>GLSL支持任意类型的数组，包括结构体数组。在GLSL4.3中，数组的组成元素也可以是另一个数组，因此可以处理多维度的数据。不过GLSL4.2和更早的版本不允许建立数组类型的数组（因此无法创建多维度的数组）。</p><p>数组属于GLSL中第一等（first-class）类型，也就是说他有构造函数，并且可以用作函数的参数和返回类型。此外GLSL的数组与std::array类似，他有一个隐式方法可以返回元素的个数：即取长度的方法 length()。</p><h1 id="存储限制符"><a class="markdownIt-Anchor" href="#存储限制符"></a> 存储限制符</h1><p>数据类型也可以通过一些修饰符来改变自己的行为。GLSL中一共定义了几种全局范围的修饰符：</p><table><thead><tr><th>类型修饰符</th><th>描述</th></tr></thead><tbody><tr><td>const</td><td>将一个变量定义为只读形式。如果它初始化时用的是一个编译时常量，那么它本身也会成为编译时常量</td></tr><tr><td>in</td><td>设置这个变量位着色器阶段的输入变量</td></tr><tr><td>out</td><td>设置这个变量位着色器阶段的输出变量</td></tr><tr><td>uniform</td><td>设置这个变量为用户应用程序传递给着色器的数据，它对于给定的图元而言是一个常量</td></tr><tr><td>buffer</td><td>设置应用程序共享的一块可读写的内存。这块内存也作为着色器中存储缓存（storage buffer）使用</td></tr><tr><td>shared</td><td>设置变量是本地工作组（local work group）中共享的。它只能用于计算着色器中</td></tr></tbody></table><h2 id="in-存储限制符"><a class="markdownIt-Anchor" href="#in-存储限制符"></a> in 存储限制符</h2><p>in 修饰符用于定义着色器阶段的输入变量。这类输入变量可以是顶点属性（对于顶点着色器），或者前一个着色器阶段的输出变量。</p><p>片元着色器也可以使用一些其他的关键词来限定自己的输入变量。</p><h2 id="out-存储限制符"><a class="markdownIt-Anchor" href="#out-存储限制符"></a> out 存储限制符</h2><p>out 修饰符用于定义一个着色器阶段的输出变量——例如，顶点着色器中输出变换后的齐次坐标，或者片元着色器中输出的最终片元颜色。</p><h2 id="uniform-存储限制符"><a class="markdownIt-Anchor" href="#uniform-存储限制符"></a> uniform 存储限制符</h2><p>在着色器运行之前，uniform 修饰符可以指定一个在应用程序中设置好的变量，它不会再图元处理的过程中发生变化。uniform 变量在所有可用的着色器阶段之间都是共享的，它必须定义为全局变量。任何类型的变量（包括结构体和数组）都可以设置为uniform变量。着色器无法写入到uniform变量，也无法改变它的值。</p><h2 id="buffer-存储限制符"><a class="markdownIt-Anchor" href="#buffer-存储限制符"></a> buffer 存储限制符</h2><p>如果需要在应用程序中共享一大块缓存给着色器，那么最好的方法是使用buffer变量。它与uniform变量非常类似，不过也可以用着色器对它的内容进行修改。通常来说，需要在一个buffer块中使用buffer变量。</p><p>buffer修饰符指定随后的块作为着色器与应用程序共享的一块内存缓存。这块缓存对于着色器来说是可读的也是可写的。缓存的大小可以在着色器编译和程序连接完成后设置。</p><h2 id="shared-存储限制符"><a class="markdownIt-Anchor" href="#shared-存储限制符"></a> shared 存储限制符</h2><p>shared 修饰符只能用于计算着色器当中，它可以建立本地工作组内共享的内存。</p><h1 id="语句"><a class="markdownIt-Anchor" href="#语句"></a> 语句</h1><p>着色器的真正工作是计算数值以及完成一些决策工作。与C++中的形式类似，GLSL也提供了大量的操作符，来实现各种数值计算所需的算术操作，以及一系列控制着色器运行的逻辑操作。</p><h2 id="算数操作符"><a class="markdownIt-Anchor" href="#算数操作符"></a> 算数操作符</h2><table><thead><tr><th>优先级</th><th>操作符</th><th>可用类型</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>()</td><td>——</td><td>成组操作</td></tr><tr><td>2</td><td>[]<br />f()<br />.（句号）<br />++--</td><td>数组、矩阵、向量<br />函数<br />结构体<br />算术类型</td><td>数组的下标<br />函数调用与构造函数<br />访问结构体的域变量或者方法<br />后置递增/递减</td></tr><tr><td>3</td><td>++--<br />+ -<br />~<br />!</td><td>算数类型<br />算数类型<br />整型<br />布尔型</td><td>前置递增/递减<br />一元正/负数<br />一元按位“非”（not）<br />一元逻辑“非”（not）</td></tr><tr><td>4</td><td>*/%</td><td>算数类型</td><td>乘法运算</td></tr><tr><td>5</td><td>+ -</td><td>算数类型</td><td>加法运算</td></tr><tr><td>6</td><td>&lt;&lt;&gt;&gt;</td><td>整形</td><td>按位运算</td></tr><tr><td>7</td><td>&lt;&gt; &lt;= &gt;=</td><td>算数类型</td><td>关系比较操作</td></tr><tr><td>8</td><td>== !=</td><td>任意</td><td>相等操作</td></tr><tr><td>9</td><td>&amp;</td><td>整形</td><td>按位“与”（and）</td></tr><tr><td>10</td><td>^</td><td>整形</td><td>按位“异或”（xor）</td></tr><tr><td>11</td><td>|</td><td>整形</td><td>按位“或”（or）</td></tr><tr><td>12</td><td>&amp;&amp;</td><td>布尔型</td><td>逻辑“与”（and）</td></tr><tr><td>13</td><td>^^</td><td>布尔型</td><td>逻辑“异或”（xor）</td></tr><tr><td>14</td><td>||</td><td>布尔型</td><td>逻辑“或”（or）</td></tr><tr><td>15</td><td>a?b:c</td><td>布尔?任意:任意</td><td>三元选择操作符</td></tr><tr><td>16</td><td>=<br />+= -=<br />*= /=<br />%= &lt;&lt;= &gt;&gt;=<br />&amp;= ^= |=</td><td></td><td>赋值<br />算数赋值<br /><br /><br /></td></tr><tr><td>17</td><td>,（逗号）</td><td>任意</td><td>操作符序列</td></tr></tbody></table><h2 id="操作符重载"><a class="markdownIt-Anchor" href="#操作符重载"></a> 操作符重载</h2><p>GLSL中的大部分操作符都是经过重载的，也就是说它们可以用于多种类型的数据操作。特别是，矩阵和向量的算数运算符（包括前置和后置的递增/递减符号“++”和“–”）在GLSL中都是经过严格定义的。</p><h2 id="流控制"><a class="markdownIt-Anchor" href="#流控制"></a> 流控制</h2><p>GLSL的逻辑控制方式用的也是流行的if-else和switch语句。</p><h2 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h2><p>GLSL支持C语言形式的for、while和do…while 循环。其中for循环可以在循环初始化条件中声明循环迭代变量。此时迭代变量的作用域只限于循环体内。</p><h2 id="流控制语句"><a class="markdownIt-Anchor" href="#流控制语句"></a> 流控制语句</h2><p>除了条件和循环之外，GLSL还支持一些别的控制语句。</p><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>终止循环体的运行，并且继续执行循环体外的内容</td></tr><tr><td>continue</td><td>终止循环体内当前迭代过程的执行，跳转到代码块开始部分并继续执行下一次迭代的内容</td></tr><tr><td>return【结果】</td><td>从当前子例程返回，可以带有一个函数返回值（返回值必须与函数声明的返回类型相符）</td></tr><tr><td>discard</td><td>丢弃当前的片元，终止着色器的执行。discard语句只在片元着色器中有效</td></tr></tbody></table><p>discard语句只适用于片元着色器中。片元着色器的运行会在discard语句的位置上立即终止，不过这也取决于具体的硬件实现。</p><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><p>我们可以使用函数调用来取代可能反复执行的通用代码。这样当然可以减少代码的总量，并且减少发生错误的机会。GLSL支持用户自定义函数，同时也定义了一些内置函数。</p><h2 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">returnType functionName([accessModifier] type1 varuable1, [accessModifier] type2 varuable2, ...)&#123;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数限制符"><a class="markdownIt-Anchor" href="#参数限制符"></a> 参数限制符</h2><p>尽管GLSL中的函数可以在运行后修改和返回数据，但是它与“C”或者C++不同，并没有指针或者引用的概念。不过与之对应，此时函数的参数可以指定一个参数限制符，来表明它是否需要在函数运行时将数据拷贝到函数中，或者从函数中返回修改的数据。</p><table><thead><tr><th>访问修饰符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>将数据拷贝到函数中（如果没有指定修饰符，默认这种形式）</td></tr><tr><td>const in</td><td>将只读数据拷贝到函数中</td></tr><tr><td>out</td><td>从函数中获取数值（因此输入函数的值是未定义的）</td></tr><tr><td>inout</td><td>将数据拷贝到函数中，并且返回函数中修改的数据</td></tr></tbody></table><p>关键字in是可选的。如果一个变量没有包含任何访问修饰器，那么参数的声明会默认设置为使用in修饰符。但是，如果变量的值需要从函数中拷贝出来，那么我们就必须设置它为out（只能写出的变量）或者inout（可以读入也可以写出的变量）。如果我们写出到一个没有设置上述修饰符的变量上，那么会产生编译时错误。</p><p>此外如果需要在编译时验证函数是否修改了某个输入变量，可以添加一个const in 修饰符来阻止函数对变量进行写操作。如果不这么做，那么在函数中写入一个in类型的变量，相当于对变量的局部拷贝进行的修改，因此只在函数自身范围内产生作用。</p><h1 id="计算的不变性"><a class="markdownIt-Anchor" href="#计算的不变性"></a> 计算的不变性</h1><p>GLSL无法保证在不同的着色器中，两个完全相同的计算式会得到完全一样的结果。这一情形与CPU端的应用程序进行计算时的问题相同，即不同的优化方式可能会导致结果非常细微的差异。这些细微的差异对于多通道的算法会产生问题，因为各个着色器阶段可能需要计算得到完全一致的结果。GLSL有两种方法来确保着色器之间的计算不变性，即invariant或者precise关键字。</p><p>这两种方法都需要在图形设备上完成计算过程，来确保同一表达式的结果可以保证重复性（不变性）。但是，对于宿主计算机和图形硬件各自的计算，这两种方法都无法保留结果是完全一致的。着色器编译时的常量表达式是由编译器的宿主计算机计算的，因此无法保证宿主机计算的结果与图形硬件计算的结果完全相同。</p><h2 id="invariant-限制符"><a class="markdownIt-Anchor" href="#invariant-限制符"></a> invariant 限制符</h2><p>invariant 限制符可以设置任何着色器的输出变量。它可以确保如果两个着色器的输出变量使用了同样的表达式，并且表达式中的变量或者内置变量也是相同值，那么计算产生的结果也是相同的。可以将一个内置的输出变量声明为invariant，也可以声明一个用户自定义的变量为invariant。例如：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">invariant</span> <span class="built_in">gl_Position</span>;</span><br><span class="line"><span class="keyword">invariant</span> <span class="keyword">centroid</span> <span class="keyword">out</span> <span class="type">vec3</span> Color;</span><br></pre></td></tr></table></figure><p>在调试过程中，可能需要将着色器中所有可变量都设置为invariance。可以通过顶点着色器的预编译命令pragma来完成这项工作。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma STDGL invariant(all)</span></span><br></pre></td></tr></table></figure><p>全局都设置为invariance可以帮助我们解决调试问题；但是，这样对于着色器性能也会有所影响。而为了保证不变性，通常也会导致GLSL编译器所执行的一些优化工作被迫停止。</p><h2 id="precise-限制符"><a class="markdownIt-Anchor" href="#precise-限制符"></a> precise 限制符</h2><p>precise 限制符可以设置任何计算中的变量或者函数的返回值。。它的名字有点望文生义，它的用途并不是增加数据精度，而是增加计算的可复用性。我们通常在细分着色器中用它来避免造成几何体形状的裂缝。</p><p>总体来说，如果必须保证某个表达式产生的结果是一致的，即使表达式中的数据发生了变化（但是在数学上并不影响结果）也是如此，那么此时我们应该使用precise而非invariant。</p><h1 id="着色器的预处理器"><a class="markdownIt-Anchor" href="#着色器的预处理器"></a> 着色器的预处理器</h1><p>编译一个GLSL着色器的第一步是解析预处理器。这一点与C语言类似，并且GLSL同样提供了一系列命令来有条件地生成编译代码块，或者定义数值。不过，与C语言的预处理器不同的是，GLSL中没有文件包含的命令（#include）。</p><h2 id="预处理器命令"><a class="markdownIt-Anchor" href="#预处理器命令"></a> 预处理器命令</h2><table><thead><tr><th>预处理器命令</th><th>描述</th></tr></thead><tbody><tr><td>#define<br />#undef</td><td>控制常量与宏的定义，与C语言的预处理器命令类似</td></tr><tr><td>#if<br />#ifdef<br />#ifndef<br />#else<br />#elif<br />#endif</td><td>代码的条件编译，与c语言的预处理器命令和defined操作符均类似。<br />条件表达式中只可以使用整数表达式或者#include定义的值</td></tr><tr><td>#error text</td><td>强制编译器将text文字内容（直到第一个换行符为止）插入到着色器的信息日志当中</td></tr><tr><td>#pragma options</td><td>控制编译器的特定选项</td></tr><tr><td>#extension options</td><td>设置编译器支持特定GLSL拓展功能</td></tr><tr><td>#version number</td><td>设置当前使用的GLSL版本名称</td></tr><tr><td>#line options</td><td>设置诊断行号</td></tr></tbody></table><h2 id="宏定义"><a class="markdownIt-Anchor" href="#宏定义"></a> 宏定义</h2><p>GLSL预处理器可以采取与C语言预处理器类似的宏定义方式，不过它不支持字符串替换以及预编译连接符。宏可以定义为单一的值。</p><h2 id="编译控制"><a class="markdownIt-Anchor" href="#编译控制"></a> 编译控制</h2><p>#pragma 命令可以向编译器传递附加信息，并在着色器代码编译时设置一些额外属性。</p><h3 id="编译优化选项"><a class="markdownIt-Anchor" href="#编译优化选项"></a> 编译优化选项</h3><p>优化选项用于启用或者禁用着色器的优化，它会直接影响该命令所在的着色器源代码。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma optimize(on)</span></span><br><span class="line"><span class="comment">// or #pragma optimize(off)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/">Learn OpenGL</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/Shading/">Shading</category>
      
      
      <category domain="http://example.com/tags/OpenGL/">OpenGL</category>
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Shading/">Shading</category>
      
      
      <comments>http://example.com/2023/09/25/learn-opengl/shader/glsl-overview/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>编码转换</title>
      <link>http://example.com/2023/08/26/cpptools/code-trans/</link>
      <guid>http://example.com/2023/08/26/cpptools/code-trans/</guid>
      <pubDate>Sat, 26 Aug 2023 09:12:51 GMT</pubDate>
      
      <description>一组封装了 WinApi 的编码转换方法，在 ANSI、WideChar(UTF16)、UTF8 之间自由转换</description>
      
      
      
      <content:encoded><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;format&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span> <span class="comment">// just for windows platform</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">WideCharToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span>;</span><br><span class="line"><span class="function">std::wstring <span class="title">AnsiToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function">std::u8string <span class="title">WideCharToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span>;</span><br><span class="line"><span class="function">std::wstring <span class="title">Utf8ToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span>;</span><br><span class="line"><span class="function">std::u8string <span class="title">AnsiToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">Utf8ToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">code_trans_unit_testing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for cpp23... then #include&lt;print&gt; replaced</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">println</span><span class="params">(<span class="type">const</span> std::string_view fmt, Types&amp;&amp;... args)</span> </span>&#123; std::cout &lt;&lt; std::<span class="built_in">vformat</span>(fmt, std::<span class="built_in">make_format_args</span>(args...)) &lt;&lt; <span class="string">&quot;\n&quot;</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> std::string_view fmt, Types&amp;&amp;... args)</span> </span>&#123; std::cout &lt;&lt; std::<span class="built_in">vformat</span>(fmt, std::<span class="built_in">make_format_args</span>(args...)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">WideCharToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, ws, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::string s; s.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, ws, <span class="number">-1</span>, s.<span class="built_in">data</span>(), length, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">AnsiToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, s, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::wstring ws; ws.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, s, <span class="number">-1</span>, ws.<span class="built_in">data</span>(), length)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::u8string <span class="title">WideCharToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* ws)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">WideCharToMultiByte</span>(CP_UTF8, <span class="number">0</span>, ws, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::u8string u8s; u8s.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WideCharToMultiByte</span>(CP_UTF8, <span class="number">0</span>, ws, <span class="number">-1</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(u8s.<span class="built_in">data</span>()), length, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u8s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">Utf8ToWideChar</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> length = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(u8s), <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">std::wstring ws; ws.<span class="built_in">resize</span>(length);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(u8s), <span class="number">-1</span>, ws.<span class="built_in">data</span>(), length)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Conversion failed. Error code: %lu\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::u8string <span class="title">AnsiToUtf8</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">WideCharToUtf8</span>(<span class="built_in">AnsiToWideChar</span>(s).<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">Utf8ToAnsi</span><span class="params">(<span class="type">const</span> <span class="type">char8_t</span>* u8s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">WideCharToAnsi</span>(<span class="built_in">Utf8ToWideChar</span>(u8s).<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">code_trans_unit_testing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;common unit test begin!&quot;</span>);</span><br><span class="line"><span class="type">const</span> std::wstring input_w = <span class="string">L&quot;成功！&quot;</span>;</span><br><span class="line"><span class="type">const</span> std::u8string input_u8 = <span class="built_in">WideCharToUtf8</span>(input_w.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="type">const</span> std::string input = <span class="built_in">WideCharToAnsi</span>(input_w.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;Ansi&lt;-&gt;WideChar: &#123;&#125;&quot;</span>, <span class="built_in">WideCharToAnsi</span>(<span class="built_in">AnsiToWideChar</span>(input.<span class="built_in">c_str</span>()).<span class="built_in">c_str</span>()));</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;Utf8&lt;-&gt;WideChar: &#123;&#125;&quot;</span>, <span class="built_in">WideCharToAnsi</span>(<span class="built_in">Utf8ToWideChar</span>(input_u8.<span class="built_in">c_str</span>()).<span class="built_in">c_str</span>()));</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;Utf8&lt;-&gt;Ansi: &#123;&#125;&quot;</span>, <span class="built_in">Utf8ToAnsi</span>(<span class="built_in">AnsiToUtf8</span>(input.<span class="built_in">c_str</span>()).<span class="built_in">c_str</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/cpp/">cpp</category>
      
      <category domain="http://example.com/categories/cpp/tools/">tools</category>
      
      <category domain="http://example.com/categories/cpp/tools/code-trans/">code-trans</category>
      
      
      <category domain="http://example.com/tags/Cpp/">Cpp</category>
      
      <category domain="http://example.com/tags/Tools/">Tools</category>
      
      <category domain="http://example.com/tags/CodeTrans/">CodeTrans</category>
      
      <category domain="http://example.com/tags/Unicode/">Unicode</category>
      
      <category domain="http://example.com/tags/Ansi/">Ansi</category>
      
      
      <comments>http://example.com/2023/08/26/cpptools/code-trans/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>结构型设计模式</title>
      <link>http://example.com/2023/08/25/design-patterns/structural-pattern/</link>
      <guid>http://example.com/2023/08/25/design-patterns/structural-pattern/</guid>
      <pubDate>Fri, 25 Aug 2023 06:06:57 GMT</pubDate>
      
      <description>记录设计模式中的结构型设计模式</description>
      
      
      
      <content:encoded><![CDATA[<p>结构型设计模式主要关注如何设置应用程序的结构，以使代码满足SOLID设计原则，提高代码的通用性和可重构性。</p><p>当谈到对象的结构时，我们可以使用下面几种常用的方式：</p><ul><li><strong>继承</strong>：对象可以直接获得基类的非私有成员和方法。为实例化对象，派生类必须提供每个继承而来的虚函数的实现，否则该派生类是抽象的，不能被实例化（但可以继承该派生类）</li><li><strong>组合</strong>：组合是一种部分与整体的关系，部分不可以离开整体而单独存在。例如，如果某个对象有一个类型为<code>owner&lt;T&gt;</code>的成员，当该对象被销毁时，其成员也随之被销毁</li><li><strong>聚合</strong>：聚合是一种部分与整体的关系，部分和整体可以单独存在。例如，一个对象可以含有类型为<code>T*</code>或者<code>shared_ptr&lt;T&gt;</code>的成员。</li></ul><p>我们把组合和聚合看作同一种类型的方法。例如，Person类含有一个类型为Address的成员，我们既可以将Address作为外部定义的类，也可以将其定义为Person的内部类。换言之，假设将Person中的Address类对象声明为公共成员，在上述两种方式下，我们可以分别使用Address和Person::Address的方法将其实例化。</p><p>想表达“聚合”的意思但却使用“组合”这个词的现象很普遍，以至于我们可以互换地使用它们。例如，当我们谈论IoC容器时，我们使用的是“组合”。但是，IoC容器不是单独控制每个对象的生命周期吗？的确如此，虽然这里使用“组合”这个词，其实是指“聚合”。</p><h1 id="适配器模式"><a class="markdownIt-Anchor" href="#适配器模式"></a> 适配器模式</h1><p>根据已有的接口得到另一个不同的接口，在接口上构建一个适配器。</p><h2 id="适配器"><a class="markdownIt-Anchor" href="#适配器"></a> 适配器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void DrawPoints(CPaintDC&amp; dc, std::vector&lt;Point&gt;::iterator start, std::vector&lt;Point&gt;::iterator end);</span><br></pre></td></tr></table></figure><p>当我们需要提供像素坐标以渲染图像，但是我们只有一些向量对象。我们要绘制一系列矩形：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::shared_ptr&lt;VectorObject&gt;&gt; vectorObjects&#123;</span><br><span class="line">    std::<span class="built_in">make_shared</span>&lt;VectorRectangle&gt;(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    std::<span class="built_in">make_shared</span>&lt;VectorRectangle&gt;(<span class="number">30</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了绘制这些对象，我们需要将每个矩形从一组线段转换为数量庞大的像素点。为此，我们定义了一个单独的适配器类，用于存储这些像素点，并且定义一组迭代器来访问这些点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LineToPointAdapter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;Point&gt; Points;</span><br><span class="line">    <span class="built_in">LineToPointAdapter</span>(Line&amp; line)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">begin</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> point.<span class="built_in">begin</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">end</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> point.<span class="built_in">end</span>();&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Points points;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Line对象转换为像素点集的过程由构造函数完成，所以<code>LineToPointAdapter</code>是<strong>饿汉式的适配器</strong>。在适配器对象构建过程中，转换工作随之完成。</p><p><strong>Then：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; obj: vectorObjects)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; line: *obj)</span><br><span class="line">&#123;</span><br><span class="line">LineToPointAdapter lpo&#123; line &#125;;</span><br><span class="line"><span class="built_in">DrawPoints</span>(dc, lpo.<span class="built_in">begin</span>(), lpo.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="临时适配器对象"><a class="markdownIt-Anchor" href="#临时适配器对象"></a> 临时适配器对象</h2><p>上述代码存在一个主要的问题：每次刷新屏幕时，函数<code>DrawPoints()</code>都会被调用，这意味着适配器对象会不断地为同样的线段对象生成相同的像素点数据，甚至是无数次！怎样改善这个问题呢？</p><p>一种解决办法是在程序的开始处定义一个像素点容器，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;Point&gt; points;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; obj: vectorObjects)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; line: *obj)</span><br><span class="line">&#123;</span><br><span class="line">LineToPointAdapter lpo&#123; line &#125;;</span><br><span class="line">points.<span class="built_in">assign</span>(lpo.<span class="built_in">begin</span>(), lpo.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，假如在某个时候，原始的几何对象<code>vectorObjects</code>发生了变化。我们并不知道它们发生了怎样的变化，但我们确实想缓存未改动的数据，而仅仅为变化的对象重新生成像素点数据。</p><p>首先，为了避免重新生成数据，我们需要独特的识别线段的方法，这意味着我们需要独特的识别点的方法。此时，<strong>ReSharper</strong> 的 <strong>Generate</strong> | <strong>Hash</strong> 函数可以派上用场：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">size_t</span> <span class="title">hash_value</span><span class="params">(<span class="type">const</span> Point&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> seed = <span class="number">0x725C686F</span>;</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.x);</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.x);</span><br><span class="line"><span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">Point start, end;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">size_t</span> <span class="title">hash_value</span><span class="params">(<span class="type">const</span> Line&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> seed = <span class="number">0x719E6B16</span>;</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.start);</span><br><span class="line">boost::<span class="built_in">hash_combine</span>(seed, obj.end);</span><br><span class="line"><span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LineToPointCachingAdapter</code>有一个缓存<code>cache</code>，它是一种从哈希值到点的映射：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> map&lt;<span class="type">size_t</span>, Points&gt; cache;</span><br></pre></td></tr></table></figure><p>当迭代器生成像素点集时，我们将以如下方式返回被访问的对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cache[line_hash].<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Points::iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cache[line_hash].<span class="built_in">end</span>(); &#125;</span><br></pre></td></tr></table></figure><p>这个算法有趣的地方在于：在生成像素点之前，先检查这些像素点是否已经生成，如果已经生成，那么函数直接退出；如果没有生成，则算法生成像素点集，并将其保存到缓存<code>cache</code>中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">LineToPointCachingAdapter</span>(Line&amp; line)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> boost::hash&lt;Line&gt; hash;</span><br><span class="line">    line_hash = <span class="built_in">hash</span>(line);</span><br><span class="line">    <span class="keyword">if</span>(cache.<span class="built_in">fine</span>(line_hash) != cache.<span class="built_in">end</span>())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Points point;</span><br><span class="line">    <span class="comment">// same code as before;</span></span><br><span class="line">    </span><br><span class="line">    cache[line_hash] = points;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了hash函数和缓存cache的帮助，我们可以显著减少转换次数。</p><h2 id="双向转换器"><a class="markdownIt-Anchor" href="#双向转换器"></a> 双向转换器</h2><p>根据程序的设计，要求输入数字的文本框会将其内部的状态保存为字符串，而我们想将输入的值记录为数字，然后验证该输入是否为有效数字。如何将UI的输入映射为适当的变量？</p><p>通常，我们需要的是<strong>双向绑定</strong>：UI的输入会修改底层变量（例如，类的某个成员），但同时，如果底层变量被修改，那么UI也将相应地更新。</p><p>表现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntToStringConverter converter;</span><br><span class="line">std::cout &lt;&lt; converter.<span class="built_in">Convert</span>(<span class="number">123</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 123</span></span><br><span class="line">std::cout &lt;&lt; converter.<span class="built_in">ConvertBack</span>(<span class="string">&quot;456&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 456</span></span><br><span class="line">std::cout &lt;&lt; converter.<span class="built_in">ConvertBack</span>(<span class="string">&quot;xyz&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// -2147483648</span></span><br></pre></td></tr></table></figure><p>在实际开发中，我们需要同时处理许多问题：不仅要适配器来转换参数，还要进行验证，并在相关参数发生变化时自动完成转换（通过观察者模式）。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>“适配器”是一个非常简单的概念：它允许我们将已有的接口调整（适配）为我们需要另一个接口。适配器模式存在的真正问题是，在适配过程中，有时会生成临时数据以满足其他接口的要求。当发生这种情况时，我们可以采用缓存策略，确保只在必要时生成新的数据。当缓存的数据发生变化时，需要清理缓存中过时的数据。</p><p>还有一个主题是懒汉型适配器，我们之前的实现总是在适配器创建时完成适配转换。</p><h1 id="桥接模式"><a class="markdownIt-Anchor" href="#桥接模式"></a> 桥接模式</h1><h2 id="pimpl-模式"><a class="markdownIt-Anchor" href="#pimpl-模式"></a> Pimpl 模式</h2><p><strong>header file:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">std::string name;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>();</span><br><span class="line">    ~<span class="built_in">Person</span>();</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">PersonImpl</span>;</span><br><span class="line">    PersonImpl *impl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Person</code>类将其具体实现隐藏在另一个类中，即<code>PersonImpl</code>。需要格外注意的是<code>PersonImpl</code>类不是在头文件中定义的，而是驻留在 <code>.cpp</code>文件（<code>Person.cpp</code>，因此<code>Person</code>和<code>PersonImpl</code>放在一起）。它的定义非常简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span>::PersonImpl</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">(Person* p)</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Person</code>的构造函数中创建<code>PersonImpl</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">    : <span class="built_in">impl</span>(<span class="keyword">new</span> PersonImpl) &#123;&#125;</span><br><span class="line">Person::~<span class="built_in">Person</span>() &#123;<span class="keyword">delete</span> impl;&#125;</span><br></pre></td></tr></table></figure><p><code>Person::greet()</code>接口只是将控制权交给<code>PersonImpl::greet()</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::greet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    impl-&gt;<span class="built_in">greet</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> Person::PersonImpl::<span class="built_in">greet</span>(Person* p)</span><br><span class="line">&#123;</span><br><span class="line">    std::<span class="built_in">println</span>(<span class="string">&quot;hello &#123;&#125;&quot;</span>, p-&gt;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，这就是Pimpl模式。</p><p>Pimpl模式是桥接模式的一种很好的体现：pimpl是一种不透明指针（即我们不知道它背后是什么），它起着桥梁的作用，将公共接口的成员与其隐藏在 .cpp 文件中的底层实现结合了起来。</p><h2 id="桥接模式介绍"><a class="markdownIt-Anchor" href="#桥接模式介绍"></a> 桥接模式介绍</h2><p><strong>Pimpl</strong> 模式是桥接模式（Bridge）模式的一种具体体现。</p><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>桥接模式通常作为连接器或粘合剂，将两个“不相关”的组件连接起来。抽象（接口）的使用允许组件之间在不了解具体实现的情况下彼此交互。</p><p>也就是说，桥接模式的参与者确实需要意识到彼此的存在。者与中介者模式形成了对比，中介者模式允许对象在毫不知晓对方的情况下进行通信。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/">Learn Design Patterns</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/Learn-Structural-Pattern/">Learn Structural Pattern</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Design-Patterns/">Design Patterns</category>
      
      <category domain="http://example.com/tags/Reading-Note/">Reading Note</category>
      
      <category domain="http://example.com/tags/Structural-Pattern/">Structural Pattern</category>
      
      
      <comments>http://example.com/2023/08/25/design-patterns/structural-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>the shading</title>
      <link>http://example.com/2023/08/20/learn-opengl/shader/the-shading/</link>
      <guid>http://example.com/2023/08/20/learn-opengl/shader/the-shading/</guid>
      <pubDate>Sun, 20 Aug 2023 08:54:21 GMT</pubDate>
      
      <description>OpenGL 的着色器相关</description>
      
      
      
      <content:encoded><![CDATA[<p>Shading is local. <font color=Peru>No shadow</font> will be generated! (shading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span> shadow)</p><h1 id="diffuse-reflection"><a class="markdownIt-Anchor" href="#diffuse-reflection"></a> Diffuse Reflection</h1><ul><li><p>Light is scattered uniformly in all directions</p><ul><li>Surface color is the same for all view directions<details><summary>图片</summary> <img text-al style="margin-left: 0%; zoom: 50%;" src="/images/the-shading/image-20230820175637006.png" alt=""  /></details></li><li>But how much light (energy) is received?<ul><li>lambert’s cosine law<details><summary>图片</summary><img src="/images/the-shading/image-20230820211502470.png" alt="" style="margin-left: 0%;margin-bottom: 20px; zoom: 50%;" /></details></li></ul></li></ul></li><li><p>Shading independent of view direction</p><img src="/images/the-shading/image-20230820212524209.png" alt="" style=" zoom: 50%;" /></li></ul><h1 id="specular-term-blinn-phong"><a class="markdownIt-Anchor" href="#specular-term-blinn-phong"></a> Specular Term (Blinn-Phong)</h1><p>Intensity depends on view direction</p><ul><li>Bright near mirror reflection direction<br /><img src="/images/the-shading/image-20230822141743340.png" alt="" style="zoom:50%;" /></li></ul><h1 id="ambient-term"><a class="markdownIt-Anchor" href="#ambient-term"></a> Ambient Term</h1><p>Shading that does not depend on anything</p><ul><li>Add constant color to account for disregarded illumination and fill in black shadows</li><li>This is approximate / fake!<br /><img src="/images/the-shading/image-20230824151710347.png" alt="" style="zoom:50%;" /></li></ul><h1 id="blinn-phong-reflection-model"><a class="markdownIt-Anchor" href="#blinn-phong-reflection-model"></a> Blinn-Phong Reflection Model</h1><img src="/images/the-shading/image-20230824152006727.png" alt="" style="zoom:80%;" /><h1 id="graphics-pipeline"><a class="markdownIt-Anchor" href="#graphics-pipeline"></a> Graphics Pipeline</h1><img src="/images/the-shading/image-20230824153702767.png" alt="" style="zoom: 50%;" /><h1 id="shadertoy-beta"><a class="markdownIt-Anchor" href="#shadertoy-beta"></a> <a href="https://www.shadertoy.com/">Shadertoy BETA</a></h1>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/">Learn OpenGL</category>
      
      <category domain="http://example.com/categories/Learn/Learn-OpenGL/Shading/">Shading</category>
      
      
      <category domain="http://example.com/tags/OpenGL/">OpenGL</category>
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Shading/">Shading</category>
      
      
      <comments>http://example.com/2023/08/20/learn-opengl/shader/the-shading/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一些数学公式</title>
      <link>http://example.com/2023/08/19/mathematics/some_mathematical_formulas/</link>
      <guid>http://example.com/2023/08/19/mathematics/some_mathematical_formulas/</guid>
      <pubDate>Sat, 19 Aug 2023 04:30:00 GMT</pubDate>
      
      <description>常用的数学公式</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="rodrigues-rotation-formula"><a class="markdownIt-Anchor" href="#rodrigues-rotation-formula"></a> Rodrigues’ Rotation Formula</h1><p>Rotation by angle <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> around axis <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">n</mtext></mrow><annotation encoding="application/x-tex">\textbf{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord text"><span class="mord textbf">n</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext mathvariant="bold">R</mtext><mo stretchy="false">(</mo><mtext mathvariant="bold">n</mtext><mo separator="true">,</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mtext mathvariant="bold">I</mtext><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><msup><mtext mathvariant="bold">nn</mtext><mi>T</mi></msup><mo stretchy="false">)</mo><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><munder><munder><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>z</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo stretchy="true">⏟</mo></munder><mtext mathvariant="bold">N</mtext></munder></mrow><annotation encoding="application/x-tex">\textbf{R}(\textbf{n},\alpha) = cos(\alpha)\textbf{I} + (1 - cos(\alpha)\textbf{nn}^T) + sin(\alpha)\underbrace{\begin{pmatrix}0 &amp; -n_z &amp; n_y \\n_z &amp; 0 &amp; -n_x \\-n_y &amp; n_x &amp; 0\end{pmatrix} }_\textbf{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord textbf">R</span></span><span class="mopen">(</span><span class="mord text"><span class="mord textbf">n</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord text"><span class="mord textbf">I</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord text"><span class="mord textbf">nn</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:4.928317em;vertical-align:-2.8782970000000003em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0500199999999995em;"><span style="top:-1.1717229999999996em;"><span class="pstrut" style="height:4.05002em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord textbf mtight">N</span></span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span class="svg-align" style="top:-1.8519999999999999em;"><span class="pstrut" style="height:4.05002em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:4.05002em;"></span><span class="mord"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.19802em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8782970000000003em;"><span></span></span></span></span></span></span></span></span></span></p><h1 id="orthographic-projection"><a class="markdownIt-Anchor" href="#orthographic-projection"></a> Orthographic Projection</h1><p>Translate (<strong>center</strong> to origin) <font color=Peru>first</font>, then scale (length/width/height to <strong>2</strong>)</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>r</mi><mo>−</mo><mi>l</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>t</mi><mo>−</mo><mi>b</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mi>f</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>r</mi><mo>+</mo><mi>l</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>t</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M_{ortho} = \begin{bmatrix}\frac{2}{r-l} &amp;0&amp;0&amp;0\\0&amp;\frac{2}{t-b}&amp;0&amp;0\\0&amp;0&amp;\frac{2}{n-f}&amp;0\\0&amp;0&amp;0&amp;1\\\end{bmatrix}\begin{bmatrix}0&amp;0&amp;0&amp;-\frac{r+l}{2}\\0&amp;0&amp;0&amp;-\frac{t+b}{2}\\0&amp;0&amp;0&amp;-\frac{n+f}{2}\\0&amp;0&amp;0&amp;1\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.023094em;vertical-align:-2.2615469999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.761547em;"><span style="top:-4.9164390000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.419561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0984530000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615469999999998em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.736216em;"><span style="top:-4.856108000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.6159999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.323784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.123784em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.236216em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><strong>Caveat</strong><ul><li>Looking at / along -Z is making near and far not intuitive (n &gt; f)</li><li>FYI: that’s why OpenGL (a Graphics API) uses left hand coords.</li></ul></li></ul><h1 id="perspective-projection"><a class="markdownIt-Anchor" href="#perspective-projection"></a> Perspective Projection</h1><ol><li>First “squish” the frustum into a cuboid (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mo>&gt;</mo><mi>n</mi><mo separator="true">,</mo><mi>f</mi><mo>−</mo><mo>&gt;</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">n -&gt; n, f-&gt; f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>)(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi></mrow></msub><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">M_{persp}-&gt;ortho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">o</span></span></span></span>)</li><li>Do orthographic projection (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{ortho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, already known!)</li><li><strong>In order to find a transformation</strong><ul><li>Precall the key idea: Find the relationship between transformed points (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo separator="true">,</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo separator="true">,</mo></msup><mo separator="true">,</mo><msup><mi>z</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">x^,,y^,,z^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.631332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span>) and the original points (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x,y,z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>)</li></ul></li></ol><details>   <summary>过程</summary>  <img src="/images/some_mathematical_formulas/image-20230819182429668.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819182909928.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819182953853.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819183018965.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819183056277.png" style="zoom:50%;" />  <img src="/images/some_mathematical_formulas/image-20230819183126120.png" style="zoom:50%;" /></details><p>结果：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>n</mi><mi>f</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M_{persp-&gt;ortho} = \begin{bmatrix}n&amp;0&amp;0&amp;0\\0&amp;n&amp;0&amp;0\\0&amp;0&amp;n+f&amp;-nf\\0&amp;0&amp;1&amp;0\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80303em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6529999999999996em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.79999em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.3959900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4119800000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.653em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi></mrow></msub><mo>=</mo><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{persp} = M_{ortho}M_{persp-&gt;ortho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Mathematics/">Mathematics</category>
      
      <category domain="http://example.com/categories/Learn/Mathematics/Formula/">Formula</category>
      
      
      <category domain="http://example.com/tags/c/">c++</category>
      
      <category domain="http://example.com/tags/mathematics-formula/">mathematics formula</category>
      
      
      <comments>http://example.com/2023/08/19/mathematics/some_mathematical_formulas/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线性代数中的线性方程组</title>
      <link>http://example.com/2023/08/19/mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</link>
      <guid>http://example.com/2023/08/19/mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</guid>
      <pubDate>Sat, 19 Aug 2023 04:30:00 GMT</pubDate>
      
      <description>线性代数中的线性方程组 概念</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="线性代数中的线性方程组"><a class="markdownIt-Anchor" href="#线性代数中的线性方程组"></a> 线性代数中的线性方程组</h1><p>线性方程组是线性代数的核心，下面通过简单而具体的设置来引入线性代数的许多重要概念</p><h2 id="线性方程组"><a class="markdownIt-Anchor" href="#线性方程组"></a> 线性方程组</h2><p>包含变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,\cdots,x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<strong>线性方程</strong>是形如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a_1x_1+a_2x_2+\dots+a_nx_n=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span> 的方程，其中b与系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,\dots,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是实数或者复数，通常是已知数。下标n可以是任意正整数。</p><p><strong>线性方程组</strong>是由一个或者几个包含相同变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,\cdots,x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的线性方程组成的。线性方程组的解是一组数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(s_1,s_2,\dots,s_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，用这组数分别代替<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,\cdots,x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时所有的方程的两边相等。</p><p>方程组所有可能的解的集合称为线性方程组的解集。若两个线性方程组有相同的解集，则这两个线性方程组称为<strong>等价的</strong>。也就是说，第一个方程组的每个解都是第二个方程组的解，第二个方程组的每个解都是第一个方程组的解</p><blockquote><p>线性方程组的解有下列三种情况：</p><ol><li>无解</li><li>有唯一解</li><li>有无穷多解</li></ol></blockquote><p>我们称一个线性方程组是<strong>相容的</strong>，若他又一个解或者无穷多个解；称他是<strong>不相容的</strong>，若它无解。</p><h3 id="矩阵记号"><a class="markdownIt-Anchor" href="#矩阵记号"></a> 矩阵记号</h3><p>一个线性方程组包含的主要信息可以用一个称为<strong>矩阵</strong>的紧凑的矩阵阵列表示<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。给出方程组</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mn>8</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>5</mn><msub><mi>x</mi><mn>1</mn></msub><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo>+</mo><mn>5</mn><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>10</mn></mrow></mstyle></mtd></mtr></mtable></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}x_1-2x_2+1x_3&amp;=0\\+2x_2-8x_3&amp;=8\\5x_1\;\;\;\;\;\;\;\;\;\;+5x_3&amp;=10\end{aligned}\tag3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">8</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>把每一个变量的系数写在对齐的一行中，矩阵</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>5</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1&amp;-2&amp;1\\0&amp;2&amp;-8\\5&amp;0&amp;-5\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">8</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>称为方程组 (3) 的<strong>系数矩阵</strong>，而</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>8</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>5</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(4)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{bmatrix}1&amp;-2&amp;1&amp;0\\0&amp;2&amp;-8&amp;8\\5&amp;0&amp;-5&amp;10\end{bmatrix}\tag4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">8</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">4</span></span><span class="mord">)</span></span></span></span></span></span></p><p>称为它的<strong>增广矩阵</strong>。方程组的增广矩阵是把它的系数矩阵添上一列所得，这一列是由方程组右边常数组成的。</p><p>矩阵的<strong>维数</strong>说明它包含行数和列数。上面的增广矩阵（4）有3行4列，称为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">3\times4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>（读作3行4列）矩阵。若m，n为正整数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>矩阵是一个有m行n列的数的矩阵阵列。（行数写在前面。）矩阵记号为解方程组带来便利。</p><h3 id="解线性方程组"><a class="markdownIt-Anchor" href="#解线性方程组"></a> 解线性方程组</h3><p>解线性方程组的一般方法的基本思路是把方程组用一个更容易解的等价方程组（即有相同解集的方程组）代替。</p><p>粗略地说，我们用方程组中第一个方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项消去其他方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项。然后用第二个方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项消去其他方程中含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的项，以此类推。最后我们得到一个很简单的等价方程组。</p><p>用来简化线性方程组的三种基本变换是：把某个方程换成它与另一个方程倍数的和；交换两个方程的位置；把某一个方程的所有项乘以一个非零常数。</p><blockquote><p><strong>初等行变换</strong></p><ol><li>（倍加变换）把某一行换成它本身与另一行的倍数和</li><li>（对换变换）把两行对换</li><li>（倍乘变换）把某一行的所有元素乘以同一个非零数</li></ol></blockquote><p>行变换可施加于任何矩阵，不仅仅是对于线性方程组的增广矩阵。我们称两个矩阵为<strong>行等价的</strong>，若其中一个矩阵可以经一系列初等变换成另一个矩阵。</p><p>重要的一点是行变换是<strong>可逆的</strong>。若两行被对换，则再次对换它们就会还原为原来的状态。若某行乘以非零常数 c，则将所得的行乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 就得出原来的行。最后，考虑涉及两行的倍加运算。假设把第一行的 c 倍加到第二行得到新的第二行，那么“逆”变换就是把第一行的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">-c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathnormal">c</span></span></span></span> 倍加到（新的）第二行上就得到原来的第二行。</p><p>此时，我们更关注对一个线性方程组的增广矩阵进行行变换。假设一个线性方程组经过行变换变成另一个新的方程组，考虑每一种行变换，容易看出，原方程组的任何一个解仍是新的方程组的一个解。反之，因原方程组也可由新方程组经行变换得出，故新方程组的每个解也是原方程组的解。这就证明了下列事实。</p><blockquote><p>若两个线性方程组的增广矩阵是等价的，则它们具有相同的解集。</p></blockquote><h3 id="存在与唯一性问题"><a class="markdownIt-Anchor" href="#存在与唯一性问题"></a> 存在与唯一性问题</h3><blockquote><p><strong>线性方程组的两个基本问题</strong></p><ol><li>方程组是否相容，即它是否至少有一个解？</li><li>若它有解，它是否只有一个解，即解是否唯一？</li></ol></blockquote><blockquote><p><strong>数值计算的注解</strong></p><p>在实际问题中，线性方程组是通过计算机求解的。对于方阵，计算机程序基本是应用消去法，稍加修正以改进精确度。</p><p>工商业中大量线性代数问题运用浮点运算求解，数表示为小数形式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><mn>0.</mn><msub><mi>d</mi><mn>1</mn></msub><mo>…</mo><msub><mi>d</mi><mi>p</mi></msub><mo>×</mo><mn>1</mn><msup><mn>0</mn><mi>r</mi></msup></mrow><annotation encoding="application/x-tex">\pm0.d_1\dots d_p \times10^r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord">±</span><span class="mord">0</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span>，其中 r 是整数，而小数点右边的数位 p 通常为8到16位。这种算数运算一般是有误差的，因为其结果必须四舍五入（或舍去）为存储时所需要的数位。“舍入误差”在输入像 1/3 这样的数时也会产生，因为它必须用近似的有限小数表示。幸运的是，浮点运算中的不精确性很少引起严重问题。</p></blockquote><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>反过来说矩阵是表示线性方程组主要信息的矩阵阵列 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Mathematics/">Mathematics</category>
      
      
      <category domain="http://example.com/tags/c/">c++</category>
      
      <category domain="http://example.com/tags/mathematics/">mathematics</category>
      
      
      <comments>http://example.com/2023/08/19/mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>创建型模式</title>
      <link>http://example.com/2023/07/30/design-patterns/creational-pattern/</link>
      <guid>http://example.com/2023/07/30/design-patterns/creational-pattern/</guid>
      <pubDate>Sun, 30 Jul 2023 08:57:58 GMT</pubDate>
      
      <description>记录设计模式中的创建型模式</description>
      
      
      
      <content:encoded><![CDATA[<p>在没有创建型设计模式的时候，在C++中创建对象的行为充满了危险。应该在栈上创建对象，还是应该在堆上创建？应该使用原始指针，使用unique或shared指针，还是应该彻底使用其他对象来管理创建的对象？还有一点，是手动创建对象更合适，还是说应当将包含所有关键信息的创建过程延迟到诸如工厂模式或者控制反转容器等特定的对象构造器中？</p><p>不论选择哪一种方式，创建对象仍旧是一项令人讨厌的工作，尤其是创建过程及其复杂或者需要遵守某些规定的时候。于是，创建型设计模式诞生了：它们是对象创建相关的通用方法。</p><h1 id="构造器模式"><a class="markdownIt-Anchor" href="#构造器模式"></a> 构造器模式</h1><p>构造器（Builder）模式主要关注复杂对象的创建过程，复杂对象是指的难以通过调用单行构造函数来创建的对象。这些类型的对象本身可能由其他对象组成，并且可能涉及不太明显的逻辑，因此需要专门设计单独的组件来创建。</p><p>构造器模式地目的是简化复杂对象或者一系列对象的构建过程，从而单独定义构成该复杂对象的各个组件的构建方法。</p><ul><li>构造器模式可以通过流式接口调用链来实现复杂的构建过程。为了实现流式接口，构造器的函数需要返回this或*this。为了让构造器使用继承，父类构造器需要知道派生类的实际类型，以便返回实际类型的this，使用模板参数来传递</li><li>为了强调用户使用构造器的API，我们可以将目标对象的构造函数限制为不可访问，同时定义一个create()接口返回构造器。</li><li>通过定义适当的运算符，可以使构造器转换为对象本身。</li><li>借助C++新特性中的统一初始化语法，可以实现Groovy风格的构造器。这是一种很通用的方法，可以创建各式各样的DSL</li><li>单个构造器接口可以暴露出多个子构造器接口。通过灵活的使用继承和流式接口很容易将一个构造器变换为另一个构造器。</li></ul><p>当对象构建过程是非普通的时候，构造器模式是有意义的。对于那些通过数量有限且命名合理的构造函数参数来明确构造的简单对象而言，它们应该使用构造函数（或依赖注入），而不必使用构造器模式。</p><h1 id="工厂方法和抽象工厂"><a class="markdownIt-Anchor" href="#工厂方法和抽象工厂"></a> 工厂方法和抽象工厂</h1><h2 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h2><p>使用方法来构建预定义型号的对象，替代并隐藏构造函数，强制用户创建特定类型而非任意类型的对象实例</p><h2 id="工厂"><a class="markdownIt-Anchor" href="#工厂"></a> 工厂</h2><p>专门负责创建特殊类型对象的单独的类，将工厂方法集成到工厂类里，用以追踪已创建对象，实现相互约束</p><h2 id="工厂方法和多态"><a class="markdownIt-Anchor" href="#工厂方法和多态"></a> 工厂方法和多态</h2><p>不论工厂方法属于被创建的对象本身还是属于单独定义的工厂，使用工厂方法的好处之一是它们可以返回多态类型。</p><h2 id="嵌套工厂"><a class="markdownIt-Anchor" href="#嵌套工厂"></a> 嵌套工厂</h2><p>从构造函数迁移到工厂，涉及以下步骤：</p><ul><li>将构造函数声明为受保护的</li><li>将工厂声明为对象的友元类。如果定义的某些类具有一定的层次结构，那么需要在这个层次结构中的每一个元素重复上面的操作</li><li>在工厂方法内部创建对象，然后以指针形式返回</li></ul><p>上述所有步骤的核心问题在于对象和创建该对象的工厂之间的纠缠。如果工厂在对象之后创建，并且由我们来控制工厂创建的过程，那么包含友元类的声明显然违背了开闭原则。但如果工厂创建一个它自己都无从知晓的对象，将工厂是为友元类显然更不可能</p><p>如果一开始就准备与工厂和对象打交道，那么可以考虑创建嵌套（内部）的工厂，也就是说，在对象内部定义的工厂。</p><p>注：</p><ul><li>嵌套类声明服从<a href="https://zh.cppreference.com/w/cpp/language/access">成员访问</a>说明符，从外围类的作用域之外不能指名私有的成员类，但是可以操作该类的对象。因此可以将嵌套类声明为私有，类实例公开，类实例可以正常访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wall</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">Wall</span>(<span class="type">int</span> id) :<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BasicWallFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">BasicWallFactory</span>() = <span class="keyword">default</span>;</span><br><span class="line">        <span class="function">std::shared_ptr&lt;Wall&gt; <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;Wall&gt;( <span class="keyword">new</span> <span class="built_in">Wall</span>(count++) );<span class="comment">// 无法使用make_shared</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, Wall&amp; wall) &#123;</span><br><span class="line">        <span class="keyword">return</span>  out &lt;&lt; <span class="string">&quot;I&#x27;m a wall, and id is &quot;</span>&lt;&lt; wall.id &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; </span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">static</span> BasicWallFactory factory;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> wall =  Wall::factory.<span class="built_in">create</span>();</span><br><span class="line">    std::cout &lt;&lt; *wall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂"><a class="markdownIt-Anchor" href="#抽象工厂"></a> 抽象工厂</h2><p>参与整个族类对象的创建，实际上是一种非常罕见的场景，因此与工厂方法和旧工厂模式不同，抽象工厂模式是一种只在复杂系统中出现的模式。</p><p>形如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HotDrinkFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> unique_ptr&lt;HotDrink&gt; <span class="title">make</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂本身是具有接口的工厂，但它本身是抽象的，可以作为函数的参数，同时也需要具体的实现来生成对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeFactory</span>: <span class="keyword">public</span> HotDrinkFactory&#123;</span><br><span class="line">    <span class="keyword">public</span>: <span class="function">unique_ptr&lt;HotDrink&gt; <span class="title">make</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_unique</span>&lt;Coffee&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeaFactory</span> ...</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrinkFactory</span>&#123;</span><br><span class="line">    map&lt;string, unique_ptr&lt;HotDrinkFactory&gt;&gt; hot_factorys;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DrinkFactory</span>()&#123;</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;coffee&quot;</span>, <span class="built_in">make_unique</span>&lt;CoffeeFactory&gt;());</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;tea&quot;</span>, <span class="built_in">make_unique</span>&lt;TeaFactory&gt;());</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">unique_ptr&lt;HotDrink&gt; <span class="title">make_drink</span><span class="params">(string_view name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> drink = hot_factorys[name]-&gt;<span class="built_in">make</span>();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> drink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式工厂"><a class="markdownIt-Anchor" href="#函数式工厂"></a> 函数式工厂</h2><p>当我们使用术语“工厂”时，通常指的是下面两个概念：</p><ul><li>指一个类，这个类可以创建对象</li><li>指一个函数，当调用这个函数时，可以创建一个对象。</li></ul><p>第二个概念并不是工厂方法的典型使用场景。如果传入<code>function&lt;&gt;</code>类型的参数（或者普通函数指针），该函数返回类型为T的变量，这也是一种工厂而不是工厂方法。</p><p>幸运的是，函数可以保存在变量中，这可以通过将工厂替换为函数块来实现。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrinkFactory</span>&#123;</span><br><span class="line">    map&lt;string, std::function&lt;unique_ptr&lt;HotDrink&gt;()&gt;&gt; hot_factorys;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DrinkFactory</span>()&#123;</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;coffee&quot;</span>, []()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_unique</span>&lt;Coffee&gt;();</span><br><span class="line">        &#125;);</span><br><span class="line">        hot_factorys.<span class="built_in">emplace</span>(<span class="string">&quot;tea&quot;</span>, []()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_unique</span>&lt;Tea&gt;();</span><br><span class="line">        &#125;);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">unique_ptr&lt;HotDrink&gt; <span class="title">make_drink</span><span class="params">(string_view name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> drink = hot_factorys[name]();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> drink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--*它们和抽象工厂表达的行为是一致的，由类表现多态改为函数来实现多态* --><h2 id="对象追踪"><a class="markdownIt-Anchor" href="#对象追踪"></a> 对象追踪</h2><p>与调用构造函数相比，工厂更难使用（不像构造函数那么明确），如果能从工厂中获取某些便利就好了。使用工厂的一种便利是，可以追踪所有已经创建的对象。</p><p>使用工厂的好处包括：</p><ul><li>可以知道已经创建的特定类型的对象数量。</li><li>可以修改或者完全替换整个对象（在数学意义上）的创建过程</li><li>如果使用智能指针，则可以通过观察对象的引用计数来获取对象在其他地方被引用的数量</li></ul><p>服务定位器或者反转容器可以采取这种对象追踪策略。这样容器可以以<code>shared_ptr</code>的形式构建对象，但在内部以<code>weak_ptr</code>的形式管理，这样既可以观察对象状态，又可以在运行时完全替换为新的对象</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>工厂方法：类的成员函数，用于创建对象。它通常可以替换构造函数</li><li>工厂：一个类，它知道如何创建对象。不过，如果我们给一个函数传入可创建的对象的参数（如函数或者类似的“对象”），那么这个参数也被称为工厂</li><li>抽象工厂：正如其名称所表示的意义，抽象类可以被具体类的类继承，由此产生了一个工厂类族。实际开发中抽象工厂很少见。</li></ul><p>相比调用构造函数，使用工厂有几个关键优势，即：</p><ul><li>工厂方法可以拒绝构建对象，也就是说，工厂可以返回默认初始化的智能指针，可以返回<code>optional&lt;T&gt;</code>或者空指针<code>nullptr</code>，而不是必须返回一个对象。</li><li>工厂方法可以是多态的，因此工厂方法可以返回基类或者基类的指针。使用其他方式（比如使用variant），工厂方法还可以支持返回不同的数据类型</li><li>与构造函数命名不同，工厂方法的命名不受约束并且可以更有意义，我们可以将其命名为任何名称。</li><li>工厂可以实现缓存和其他存储优化；对于诸如池或者单例模式之类的方法来说，这也是一种不错的选择</li><li>工厂可以将对象不同的关注点内容（比如验证代码）封装（即关注点分离）</li></ul><p>工厂模式与构造器模式的差别在于，使用工厂模式，我们可以一次创建一个完整的对象；而使用构造器模式，则需要分步提供对象的部分信息才能逐步完成一个对象的构建。</p><h1 id="原型模式"><a class="markdownIt-Anchor" href="#原型模式"></a> 原型模式</h1><h1 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h1>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Learn/">Learn</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/">Learn Design Patterns</category>
      
      <category domain="http://example.com/categories/Learn/Learn-Design-Patterns/Learn-Creational-Pattern/">Learn Creational Pattern</category>
      
      
      <category domain="http://example.com/tags/Learn/">Learn</category>
      
      <category domain="http://example.com/tags/Creational-Pattern/">Creational Pattern</category>
      
      <category domain="http://example.com/tags/Design-Patterns/">Design Patterns</category>
      
      <category domain="http://example.com/tags/Reading-Note/">Reading Note</category>
      
      
      <comments>http://example.com/2023/07/30/design-patterns/creational-pattern/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
